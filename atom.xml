<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>洽客前端</title>
  <subtitle>洽客技术团队 （QKED）</subtitle>
  <link href="/qkfe/atom.xml" rel="self"/>
  
  <link href="http://www.qiakr.com/"/>
  <updated>2016-11-08T05:19:37.000Z</updated>
  <id>http://www.qiakr.com/</id>
  
  <author>
    <name>LT</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微商城装修说明文档</title>
    <link href="http://www.qiakr.com/2016/11/08/store-decoration-readme/"/>
    <id>http://www.qiakr.com/2016/11/08/store-decoration-readme/</id>
    <published>2016-11-08T05:15:52.000Z</published>
    <updated>2016-11-08T05:19:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xi480.com1.z0.glb.clouddn.com/ChMkJlbKzE6IPzkoABFpT19gRYgAALI0wOYts8AEWln666.jpg" alt=""><br>微商城装修逻辑稍显复杂，这里将部分逻辑整理成文档，以便以后查询修改。<br><a id="more"></a></p>
<h3 id="相关文件"><a href="#相关文件" class="headerlink" title="相关文件"></a>相关文件</h3><h4 id="PC管理平台"><a href="#PC管理平台" class="headerlink" title="PC管理平台"></a>PC管理平台</h4><p>模板列表页<br><code>decoration_main.vm</code><br><code>decoration_main.js</code><br>模板预览模块<br><code>mod_decorationMods.vm</code><br><code>mod_decorationMods.js</code></p>
<p>模板编辑页<br><code>decoration_edit.vm</code><br><code>decoration_edit.js</code><br>模板编辑模块<br><code>m_decoration.js</code><br><code>mod_decoration.vm</code></p>
<h4 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h4><p><code>getStoreHomePage.vm</code><br><code>getStoreHomePage.js</code></p>
<h3 id="模板类型"><a href="#模板类型" class="headerlink" title="模板类型"></a>模板类型</h3><ul>
<li>默认模板 ：所有门店在没有设置模板的情况下使用默认模板</li>
<li>自定义装修：门店自己的装修模板，编辑门店自定义的装修模板，不会影响到其它门店，属于门店唯一</li>
<li>装修模板：商户可以新建模板，保存时都将保存为标准模板，标准模板可以供商户下所有门店或部分门店使用</li>
</ul>
<p>每个商户有自己的模板仓库，可以添加/编辑/删除模板</p>
<h3 id="业务逻辑"><a href="#业务逻辑" class="headerlink" title="业务逻辑"></a>业务逻辑</h3><ol>
<li>每个门店有一个商户提供的默认模板和一个自定义模板</li>
<li>门店只能编辑自定义模板或选择商户模板库中的装修模板</li>
<li>商户可批量设置门店的商城模板</li>
<li>商户可修改默认模板和装修模板</li>
</ol>
<h3 id="装修逻辑"><a href="#装修逻辑" class="headerlink" title="装修逻辑"></a>装修逻辑</h3><p>所有模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">m1000：搜索</div><div class="line">m1001：轮播广告</div><div class="line">m1002：通栏广告</div><div class="line">m1003：两栏广告</div><div class="line">m1004：商品推荐</div><div class="line">m1005：文本</div><div class="line">m1006：活动导航</div><div class="line">m1007：品牌导航</div><div class="line">m1008：自定义区域</div><div class="line">m1009：品类导航</div><div class="line">m1010：自定义分类导航</div><div class="line">m1011：店招</div><div class="line">m1012：店铺信息</div></pre></td></tr></table></figure></p>
<p>模板装修提交的数据内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">&apos;m1001&apos;:&#123;</div><div class="line">	imgHeight:320,</div><div class="line">	imgs:[],</div><div class="line">	mid:&apos;1001&apos;, //模块ID</div><div class="line">	orderNumer:1, //模块排序值</div><div class="line">&#125;,</div><div class="line">&apos;m1002&apos;:&#123;</div><div class="line">	imgUrl:&apos;https://qncdn.qiakr.com/qk_v3/fullcolumn.png&apos;,</div><div class="line">	linkType:&apos;&apos;,</div><div class="line">	linkInfo:&#123;url:&apos;&apos;, id:&apos;&apos;&#125;, //只有当linkType=0或10时，才存储url</div><div class="line">	orderNumber:2,</div><div class="line">	mid:&apos;m1002&apos;</div><div class="line">&#125;,</div><div class="line">version: 20 //当前模板的版本</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p><code>orderNumber</code> 会在提交时，根据模块的位置自动生成<br><code>version</code> 在用户保存时，自增1，用于记录模板编辑次数，也可以视为模板版本</p>
<h3 id="交互逻辑"><a href="#交互逻辑" class="headerlink" title="交互逻辑"></a>交互逻辑</h3><p><img src="http://7xi480.com1.z0.glb.clouddn.com/QQ20160502-0@2x.png" style="width:400px;"></p>
<h3 id="创建新模块"><a href="#创建新模块" class="headerlink" title="创建新模块"></a>创建新模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">0. 拖拽停止时设置拖拽标识为true</div><div class="line"></div><div class="line">1. 刷新模块排序值，更新装修配置信息</div><div class="line"></div><div class="line">2. 判断是否为拖动创建模块触发（可能是内部拖动排序触发）</div><div class="line">	是：</div><div class="line">		获取模块原始id</div><div class="line">		找到拖动到手机区域的模块</div><div class="line">		生成新的模块id 随机</div><div class="line">		根据原始id找到渲染模板和模板默认数据 渲染到预览区，替换刚刚拖动过来的模块图片</div><div class="line">		隐藏模块遮罩 显示整体遮罩 当前模块隐藏收起和编辑按钮</div><div class="line">	不是：</div><div class="line">		提示模块顺序发生了变化，请注意保存！</div><div class="line"></div><div class="line">3. 如果是商品推荐模块</div><div class="line">	是：</div><div class="line">		将品牌信息 和 分类信息添加到商品推荐模块的配置数据中</div><div class="line"></div><div class="line">4. 显示编辑模块，传递id，配置，编辑模板的名称</div><div class="line">	获取编辑界面id</div><div class="line">	获取编辑界面的DOM，检查是否存在</div><div class="line">		是：</div><div class="line">			使用新的DOM替换以前的DOM</div><div class="line">		不是：</div><div class="line">			根据 模板名称 和 数据 渲染至编辑窗口中</div><div class="line">		初始化编辑界面的组件</div><div class="line">			根据模块原始id初始化相应界面的组件</div><div class="line"></div><div class="line">5. 将是否为拖拽标识设置为false</div></pre></td></tr></table></figure>
<h3 id="取消编辑"><a href="#取消编辑" class="headerlink" title="取消编辑"></a>取消编辑</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">1. 获取编辑界面id</div><div class="line">2. 判断是否保存过，如果没有则移除，如果有，则隐藏</div><div class="line">	没有：</div><div class="line">		隐藏整体遮罩 显示模块遮罩 当前模块显示收起和编辑按钮</div><div class="line">		移除相关的编辑界面和预览中的模块</div><div class="line">	有：</div><div class="line">		隐藏整体遮罩 显示模块遮罩 当前模块显示收起和编辑按钮</div><div class="line">3. 隐藏编辑界面</div></pre></td></tr></table></figure>
<h3 id="点击编辑"><a href="#点击编辑" class="headerlink" title="点击编辑"></a>点击编辑</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. 获取模块ID、编辑模板、数据</div><div class="line">2. 显示编辑界面</div><div class="line">3. 隐藏模块遮罩 显示整体遮罩 当前模块隐藏收起和编辑按钮</div></pre></td></tr></table></figure>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">1.获取模块ID、编辑模板、数据</div><div class="line">2.提示 是否确定删除</div><div class="line">3.删了装修配置中的数据</div><div class="line">4.异步更新到后端</div><div class="line">	成功：</div><div class="line">		删除预览中的模块</div><div class="line">		隐藏整体遮罩 显示模块遮罩</div><div class="line">		判断是否没有模块了，没有则显示 提示模块</div><div class="line">	失败：</div><div class="line">		显示报错信息</div></pre></td></tr></table></figure>
<h3 id="预览和发布"><a href="#预览和发布" class="headerlink" title="预览和发布"></a>预览和发布</h3><p>店铺预览和店铺实际的商城首页为同一个地址<br>预览时，地址中有template参数，界面所有链接不可点击</p>
<h3 id="移动端界面渲染"><a href="#移动端界面渲染" class="headerlink" title="移动端界面渲染"></a>移动端界面渲染</h3><h4 id="文件位置"><a href="#文件位置" class="headerlink" title="文件位置"></a>文件位置</h4><p><code>mall/getStoreHomePage.vm</code><br><code>js/mall/getStoreHomePage.js</code></p>
<h4 id="模板数据加载"><a href="#模板数据加载" class="headerlink" title="模板数据加载"></a>模板数据加载</h4><p>为了减少页面的加载时间，装修数据、门店信息、品牌、分类等初始数据由后端注入在模板页面中返回，由全局变量 <code>PAGE_CONF</code> 中获取<br><img src="http://7xi480.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-07%20%E4%B8%8B%E5%8D%883.32.43.png" width="400"></p>
<p>页面加载完成后，直接调用 <code>renderConfig</code> 方法渲染页面<br><code>renderConfg</code> 中判断如果有自定义配置则使用自定义配置，如果没有则使用默认配置 (默认配置在当前页面中)</p>
<h4 id="模板渲染"><a href="#模板渲染" class="headerlink" title="模板渲染"></a>模板渲染</h4><p>循环配置数据，由模块ID，到模块配置 <code>MODULES</code> 中，查找到页面中的<strong>编辑模板</strong>，由<code>artTemplate</code> 渲染到页面。</p>
<p><img src="http://7xi480.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-07%20%E4%B8%8B%E5%8D%883.40.59.png" width="300"></p>
<h4 id="商品列表渲染"><a href="#商品列表渲染" class="headerlink" title="商品列表渲染"></a>商品列表渲染</h4><ul>
<li>已知数量的商品列表：直接根据选择的商品ID，异步加载渲染</li>
<li>未知数量的商品列表：将商品加载信息放入一个队列 <code>PRO_LIST</code></li>
</ul>
<p>加载触发</p>
<p>第一次渲染完成后，检测页面是否有滚动条，如果没有，则触发一次加载，如果有数据返回则停止加载，监听滚动事件，如果没有，则继续加载一下个请求，直到加载到数据。当最后队列中请求信息为空时，隐藏 <code>loading</code> 显示 <code>查看所有商品</code> 链接，刷新滚动组件。</p>
<p><img src="http://7xi480.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-07%20%E4%B8%8B%E5%8D%885.28.34.png" width="400"></p>
<p>需求修改示例</p>
<p>需求1：为商品列表模块添加一个按自定义分类展示的功能</p>
<ol>
<li>到 <code>mod_decoration.vm</code> 中修改模板内容，添加编辑项，搜索 <code>m1004</code> 找到商品模块编辑模板</li>
<li><code>m_decoration.js</code>中添加数据<code>groupData</code> 至模板</li>
<li><code>m_decoration.js</code>中添加保存模块时的取值操作 <code>previewEv</code></li>
<li>查看保存数据，预览界面是否显示正常</li>
<li>查看编辑是否显示正常</li>
<li>修改移动端 <code>getStoreHomePage.vm</code> &amp; <code>getStoreHomePage.js</code></li>
<li><code>js</code> 的 <code>_render</code> 方法、<code>loadProList</code> 方法、<code>_creatProList</code> 方法中添加对 <code>group</code> 的判断</li>
<li>查看数据返回是否正常</li>
</ol>
<p>需求2：为商品选择框添加搜索条件，按类目和自定义分类搜索</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xi480.com1.z0.glb.clouddn.com/ChMkJlbKzE6IPzkoABFpT19gRYgAALI0wOYts8AEWln666.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;微商城装修逻辑稍显复杂，这里将部分逻辑整理成文档，以便以后查询修改。&lt;br&gt;
    
    </summary>
    
      <category term="web开发" scheme="http://www.qiakr.com/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>pagination组件使用说明</title>
    <link href="http://www.qiakr.com/2016/11/07/pagination-reademe/"/>
    <id>http://www.qiakr.com/2016/11/07/pagination-reademe/</id>
    <published>2016-11-07T05:40:52.000Z</published>
    <updated>2016-11-07T05:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xi480.com1.z0.glb.clouddn.com/blog-139-150309101A0.jpg" alt=""><br>jquery.pagination.js 是一款基于bootstrap分页样式的分页插件，具有灵活配置，方便易用的特性。<br><a id="more"></a></p>
<h3 id="默认配置参数"><a href="#默认配置参数" class="headerlink" title="默认配置参数"></a>默认配置参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">var defaults = &#123;</div><div class="line">	totalData:0,			//数据总条数</div><div class="line">	showData:0,				//每页显示的条数</div><div class="line">	pageCount:9,			//总页数,默认为9</div><div class="line">	current:1,				//当前第几页</div><div class="line">	prevCls:&apos;prev&apos;,		//上一页class</div><div class="line">	nextCls:&apos;next&apos;,		//下一页class</div><div class="line">	prevContent:&apos;上一页&apos;,	//上一页内容</div><div class="line">	nextContent:&apos;下一页&apos;,	//下一页内容</div><div class="line">	activeCls:&apos;active&apos;,		//当前页选中状态</div><div class="line">	coping:false,					//首页和尾页</div><div class="line">	homePage:&apos;首页&apos;,				//首页节点内容</div><div class="line">	endPage:&apos;末页&apos;,				//尾页节点内容</div><div class="line">	count:3,							//当前页前后分页个数</div><div class="line">	jump:false,							//跳转到指定页数</div><div class="line">	jumpIptCls:&apos;jump-ipt&apos;,	//文本框内容</div><div class="line">	jumpBtnCls:&apos;jump-btn&apos;,	//跳转按钮</div><div class="line">	jumpBtn:&apos;跳转&apos;,					//跳转按钮文本</div><div class="line">	callback:function(currPageNmu)&#123;&#125;	//回调(参数：当前页码)</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul>
<li>必要参数：pageData 数据总条数 showData 每页显示条数</li>
<li>使用 <code>ul</code> 标签容器，并添加BS组件样式 <code>pagination</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//HTML</div><div class="line">&lt;div class=&quot;nav-box&quot;&gt;</div><div class="line">	&lt;ul class=&quot;pagination&quot; id=&quot;p1&quot;&gt;&lt;/ul&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">//JS</div><div class="line">$(&apos;#p1&apos;).pagination(&#123;totalData:80, showData:5&#125;)</div></pre></td></tr></table></figure>
<p>效果<br><img src="http://7xi480.com1.z0.glb.clouddn.com/QB20160224-1.jpg" alt=""></p>
<h3 id="显示’…’和’首页末页’"><a href="#显示’…’和’首页末页’" class="headerlink" title="显示’…’和’首页末页’"></a>显示’…’和’首页末页’</h3><p>页码过多时，显示<code>...</code>，显示 <code>首页</code>和<code>末页</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//HTML</div><div class="line">&lt;div class=&quot;nav-box&quot;&gt;</div><div class="line">&lt;ul class=&quot;pagination&quot; id=&quot;p2&quot;&gt;&lt;/ul&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">//JS</div><div class="line">$(&apos;#p2&apos;).pagination(&#123;totalData:100, showData:5, coping:true&#125;)</div></pre></td></tr></table></figure></p>
<p>效果<br><img src="http://7xi480.com1.z0.glb.clouddn.com/QB20160224-2.jpg" alt=""></p>
<h3 id="回调函数API"><a href="#回调函数API" class="headerlink" title="回调函数API"></a>回调函数API</h3><ul>
<li>插件提供一个配置回调和两个实例方法</li>
<li>实例方法在初始化时执行，配置回调在点击页码时触发</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//HTML</div><div class="line">&lt;div class=&quot;nav-box&quot;&gt;</div><div class="line">&lt;ul class=&quot;pagination&quot; id=&quot;p3&quot;&gt;&lt;/ul&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">//HTML</div><div class="line">&lt;div class=&quot;nav-box&quot;&gt;</div><div class="line">&lt;ul class=&quot;pagination&quot; id=&quot;p3&quot;&gt;&lt;/ul&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">//JS</div><div class="line">$(&apos;#p3&apos;).pagination(&#123;</div><div class="line">totalData:100, </div><div class="line">showData:5, </div><div class="line">coping:true,</div><div class="line">callback:function(i)&#123; $(&apos;#logBox&apos;).append(&apos;&lt;p&gt;当前页码为：&apos;+i+&apos;&lt;/p&gt;&apos;);&#125;</div><div class="line">&#125;, function(api)&#123;</div><div class="line">	$(&apos;#logBox&apos;).append(&apos;&lt;p&gt;*当前页码为：&apos;+api.getCurrent()+&apos;&lt;/p&gt;&apos;);</div><div class="line">	$(&apos;#logBox&apos;).append(&apos;&lt;p&gt;*当前总页数：&apos;+api.getTotalPage()+&apos;&lt;/p&gt;&apos;);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>效果<br><img src="http://7xi480.com1.z0.glb.clouddn.com/QB20160224-4.jpg" alt=""></p>
<p>CodePen 示例</p>
<p></p><p data-height="268" data-theme-id="13299" data-slug-hash="OMKVgV" data-default-tab="result" data-user="togglelt" class="codepen">See the Pen <a href="http://codepen.io/togglelt/pen/OMKVgV/" target="_blank" rel="external">pagination分页示例</a> by LT (<a href="http://codepen.io/togglelt" target="_blank" rel="external">@togglelt</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xi480.com1.z0.glb.clouddn.com/blog-139-150309101A0.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;jquery.pagination.js 是一款基于bootstrap分页样式的分页插件，具有灵活配置，方便易用的特性。&lt;br&gt;
    
    </summary>
    
      <category term="web开发" scheme="http://www.qiakr.com/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>uiLoading组件使用说明</title>
    <link href="http://www.qiakr.com/2016/11/07/uiLoading-readme/"/>
    <id>http://www.qiakr.com/2016/11/07/uiLoading-readme/</id>
    <published>2016-11-07T05:39:00.000Z</published>
    <updated>2016-11-07T05:42:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xi480.com1.z0.glb.clouddn.com/a6691484_1000.jpg" alt=""><br>加载动画在网页设计中是很常见的。用户们都希望网页加载又快又流畅而不是盯着屏幕苦等，而加载动画能够在内容加载完成前给用户视觉反馈，从而能够吸引用户而不让他们直接放弃继续浏览你的网站。<br><a id="more"></a></p>
<h2 id="使用CSS3动画的优点"><a href="#使用CSS3动画的优点" class="headerlink" title="使用CSS3动画的优点"></a>使用CSS3动画的优点</h2><ul>
<li>CSS3加载动画比起直接使用动图的好处是它们是易扩展的并且不需要等待加载过程。</li>
<li>CSS3动画无论是什么设备它们都能够清晰，流畅地呈现，并且你可以很容易地去改善它的效果。</li>
<li>在移动端减少网络流量和节约电耗</li>
<li>可以方便修改和操作动画效果</li>
</ul>
<h2 id="使用CSS3动画的缺点"><a href="#使用CSS3动画的缺点" class="headerlink" title="使用CSS3动画的缺点"></a>使用CSS3动画的缺点</h2><ul>
<li>不同的平台和浏览器有着不同的兼容性问题</li>
<li>复杂的css3动画需要更多的HTML标签且受浏览器性能制约</li>
</ul>
<p>常见的<a href="https://connoratherton.com/loaders" target="_blank" rel="external">CSS3 Loading动画</a></p>
<h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><p>uiLoading组件的出现主要为了解决以下问题：</p>
<ol>
<li>相比于使用GIF，更容易调整大小颜色，动画效果，动画更流畅，无需加载。</li>
<li>不增加额外标签，仅使用容器的伪类<code>:before</code>与<code>:after</code>来实现动画，使用范围更广范</li>
<li>解决按钮重复快速度点击导致异步多次提交的BUG</li>
<li>以jQ插件的方式，调用简单方便</li>
</ol>
<h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ol>
<li>Card中的信息需要异步加载显示时</li>
<li>Table列表数据异步加载示</li>
<li>按钮点击有异步请求时</li>
</ol>
<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//Button 按钮</div><div class="line">$(&apos;#btn1&apos;).uiLoading(&apos;sm&apos;);//调用插件传入参数sm，在button上显示loading动画			</div><div class="line">$(&apos;#btn1&apos;).uiLoading(&apos;sm&apos;);//再次调用隐藏button上的loading动画</div><div class="line"></div><div class="line">//列表或模块卡片上</div><div class="line">$(&apos;#table1&apos;).uiLoading(&apos;lg&apos;);//调用插件传入参数lg，在table容器上显示较大的loading动画					</div><div class="line">$(&apos;#table1&apos;).uiLoading(&apos;lg&apos;);//再次调用隐藏table上的loading</div></pre></td></tr></table></figure>
<p><strong>如果不传入任何参数，则默认显示较大的loading</strong></p>
<h2 id="按钮Loading效果"><a href="#按钮Loading效果" class="headerlink" title="按钮Loading效果"></a>按钮Loading效果</h2><p><img src="http://7xi480.com1.z0.glb.clouddn.com/QQ20160301-0%402x.png" alt=""></p>
<h2 id="列表Loading效果"><a href="#列表Loading效果" class="headerlink" title="列表Loading效果"></a>列表Loading效果</h2><p><img src="http://7xi480.com1.z0.glb.clouddn.com/QQ20160301-1%402x.png" alt=""></p>
<h2 id="Codepen-示例"><a href="#Codepen-示例" class="headerlink" title="Codepen 示例"></a>Codepen 示例</h2><p></p><p data-height="268" data-theme-id="13299" data-slug-hash="qZEXBz" data-default-tab="result" data-user="togglelt" class="codepen">See the Pen <a href="http://codepen.io/togglelt/pen/qZEXBz/" target="_blank" rel="external">uiLoading示例</a> by LT (<a href="http://codepen.io/togglelt" target="_blank" rel="external">@togglelt</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xi480.com1.z0.glb.clouddn.com/a6691484_1000.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;加载动画在网页设计中是很常见的。用户们都希望网页加载又快又流畅而不是盯着屏幕苦等，而加载动画能够在内容加载完成前给用户视觉反馈，从而能够吸引用户而不让他们直接放弃继续浏览你的网站。&lt;br&gt;
    
    </summary>
    
      <category term="web开发" scheme="http://www.qiakr.com/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>多功能选择对话框使用说明</title>
    <link href="http://www.qiakr.com/2016/11/07/power-dialog-readme/"/>
    <id>http://www.qiakr.com/2016/11/07/power-dialog-readme/</id>
    <published>2016-11-07T05:32:19.000Z</published>
    <updated>2016-11-07T05:34:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xi480.com1.z0.glb.clouddn.com/T1796WE497J8.jpg" alt=""><br>多功能弹出层封装了通用的大数据选择查询逻辑，解决项目中各处需要频繁用到选择品牌、商品、门店、导购的选择对话框的需求。<br><a id="more"></a></p>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ol>
<li>支持选择商品、品牌、门店、商户、导购【通过配置数据源，可选择任何数据】</li>
<li>支持自定义查询表单和数据</li>
<li>支持分页、显示选择结果、显示选择项目数</li>
<li>支持限制选择项目数</li>
</ol>
<h3 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h3><p><code>js/admin/mod_powerSelectDia.js</code></p>
<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>使用方式类似于 <code>select2.js</code>，返回和接收的标准化数据格式为 <code>[{id:xx, text:xxx}]</code></p>
<p>具体请参考 <code>js/admin/mod_couponEditDia.js</code></p>
<p><strong> 注意事项 </strong></p>
<ol>
<li>配置 <code>showResult</code> 显示结果为 <code>true</code> 时，要增加对话框的高度60px，以便显示选择结果区域</li>
<li>如果查询表单比较复杂，配置好模板后，可以在配置 <code>shownAfterFn</code> 这个配置中注册一些表单的事件</li>
<li>如果要验证查询表单的输入，可在配置 <code>getSearchPms</code> 中对输入数据做验证，如果验证失败，提示错误，并返回 <code>false</code></li>
</ol>
<h4 id="选择商品"><a href="#选择商品" class="headerlink" title="选择商品"></a>选择商品</h4><p>初始化<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> proSltDia = $.powerSelectDia(&#123;</div><div class="line">    <span class="attr">apiGetData</span>: CONF.apiGetProList,</div><div class="line">    <span class="attr">title</span>: <span class="string">'选择商品'</span>,</div><div class="line">    <span class="attr">listDataName</span>: <span class="string">'stockVoList'</span>,</div><div class="line">    <span class="attr">itemsStyle</span>: &#123; <span class="attr">width</span>: <span class="string">'100%'</span> &#125;,</div><div class="line">    <span class="attr">selectMulti</span>: <span class="literal">true</span>,<span class="comment">//多选</span></div><div class="line">    checkboxTpl: <span class="string">'&lt;table class="table table-condensed"&gt;\</span></div><div class="line">                    &lt;thead&gt;&lt;tr&gt;&lt;th&gt;选择&lt;/th&gt;&lt;th&gt;款号&lt;/th&gt;&lt;th&gt;商品信息&lt;/th&gt;&lt;th&gt;现售价&lt;/th&gt;&lt;th&gt;吊牌价&lt;/th&gt;&lt;th&gt;总库存&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;\</div><div class="line">                    &#123;&#123;each data as item i&#125;&#125;\</div><div class="line">                        &lt;tr&gt;\</div><div class="line">                            &lt;td&gt;&lt;div class="checkbox sltdia-item checkbox-primary m0"&gt;&lt;input id="d-&#123;&#123;item.id&#125;&#125;" class="j-dia-item"  data-id="&#123;&#123;item.id&#125;&#125;" type="checkbox" value="&#123;&#123;item.id&#125;&#125;"&gt;&lt;label for="d-&#123;&#123;item.id&#125;&#125;" title="&#123;&#123;item.text&#125;&#125;"&gt;&lt;/label&gt; &lt;/div&gt;&lt;/td&gt;\</div><div class="line">                            &lt;td&gt;[&#123;&#123;item.productCode || "无款号"&#125;&#125;]&lt;/td&gt;\</div><div class="line">                            &lt;td&gt;&#123;&#123;item.text | truncate:15&#125;&#125;&lt;/td&gt;\</div><div class="line">                            &lt;td&gt;￥&#123;&#123;item.minSkuPrice&#125;&#125;-￥&#123;&#123;item.maxSkuPrice&#125;&#125;&lt;/td&gt;\</div><div class="line">                            &lt;td&gt;￥&#123;&#123;item.marketPrice&#125;&#125;&lt;/td&gt;\</div><div class="line">                            &lt;td&gt;&#123;&#123;item.count&#125;&#125;&lt;/td&gt;\</div><div class="line">                            &lt;/tr&gt;\</div><div class="line">                    &#123;&#123;/each&#125;&#125;\</div><div class="line">                &lt;/table&gt;',</div><div class="line">    <span class="attr">searchTpl</span>: <span class="string">'&lt;div class="form-group"&gt;&lt;div class="input-group"&gt; &lt;input type="text" class="form-control input-sm w150 j-sales-name" name="fuzzyName" placeholder="请输入商品名称或款号"&gt; &lt;span class="input-group-btn"&gt; &lt;button type="button" class="btn btn-primary btn-sm j-dia-search"&gt;筛选&lt;/button&gt; &lt;/span&gt; &lt;/div&gt; &lt;/div&gt;'</span>,</div><div class="line">    <span class="attr">getSearchPms</span>: <span class="function"><span class="keyword">function</span>(<span class="params">$searchWrap</span>) </span>&#123;</div><div class="line">    <span class="comment">//返回查询数据</span></div><div class="line">        <span class="keyword">var</span> keywords = $.trim($searchWrap.find(<span class="string">'[name="fuzzyName"]'</span>).val());</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (keywords.length &gt; <span class="number">80</span>) &#123;</div><div class="line">            toastr.warning(<span class="string">'输入信息过长'</span>);</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">fuzzyName</span>: keywords,</div><div class="line">            <span class="attr">supplyTypeList</span>: <span class="string">'1_3'</span>,</div><div class="line">            <span class="attr">status</span>: <span class="number">0</span></div><div class="line">        &#125;;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">getItemsDataFn</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="comment">//返回列表需要的数据，可以自定义需要的数据，但一定要有id和text</span></div><div class="line">        <span class="keyword">return</span> data.map(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                <span class="attr">id</span>: v.product.id,</div><div class="line">                <span class="attr">text</span>: v.stock.productName || <span class="string">'xxx'</span>,</div><div class="line">                <span class="attr">count</span>: v.stock.count,</div><div class="line">                <span class="attr">productCode</span>: v.product.productCode,</div><div class="line">                <span class="attr">minSkuPrice</span>: v.minSkuPrice,</div><div class="line">                <span class="attr">maxSkuPrice</span>: v.maxSkuPrice,</div><div class="line">                <span class="attr">marketPrice</span>: v.stock.marketPrice,</div><div class="line">            &#125;;</div><div class="line">        &#125;)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">okFn</span>: <span class="function"><span class="keyword">function</span>(<span class="params">chkRes</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (chkRes.length) &#123;</div><div class="line">            <span class="comment">//处理选择结果</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            toastr.error(<span class="string">'请选择需要限制的商品'</span>);</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">cancelFn</span>: <span class="function"><span class="keyword">function</span>(<span class="params">chkRes</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!chkRes.length) &#123;</div><div class="line">            <span class="comment">//处理没有选择中任何项的逻辑</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>打开选择框<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//chkedData:如果是编辑，则为一个已经选择数组，如果是创建，则不用传或传一个空数组</div><div class="line">proSltDia.show(chkedData);</div></pre></td></tr></table></figure></p>
<h4 id="选择门店"><a href="#选择门店" class="headerlink" title="选择门店"></a>选择门店</h4><p>初始化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">var storeSltDia = $.powerSelectDia(&#123;</div><div class="line">  apiGetData: CONF.apiGetStoreList,</div><div class="line">  title: &apos;选择门店&apos;,</div><div class="line">  listDataName: &apos;storeVoList&apos;,</div><div class="line">  selectMulti: true,</div><div class="line">  searchTpl: &apos;&lt;div class=&quot;form-group text-right&quot;&gt;&lt;div class=&quot;input-group&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;form-control input-sm w150 j-sales-name&quot; name=&quot;storeName&quot; placeholder=&quot;店铺名称&quot;&gt; &lt;span class=&quot;input-group-btn&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-primary btn-sm j-dia-search&quot;&gt;筛选&lt;/button&gt; &lt;/span&gt; &lt;/div&gt; &lt;/div&gt;&apos;,</div><div class="line">  getSearchPms: function($searchWrap) &#123;</div><div class="line">    var storeName = $.trim($searchWrap.find(&apos;[name=&quot;storeName&quot;]&apos;).val());</div><div class="line"></div><div class="line">    if (storeName.length &gt; 80) &#123;</div><div class="line">        toastr.warning(&apos;输入信息过长&apos;);</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return &#123;</div><div class="line">        storeName: storeName,</div><div class="line">        open:0</div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line">  getItemsDataFn: function(data) &#123;</div><div class="line">    return data.map(function(v) &#123;</div><div class="line">        return &#123;</div><div class="line">            id: v.store.id,</div><div class="line">            text: v.store.name || &apos;xxx&apos;</div><div class="line">        &#125;;</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">  okFn: function(chkRes) &#123;</div><div class="line">    if (chkRes.length) &#123;</div><div class="line">        //处理选择结果</div><div class="line">    &#125; else &#123;</div><div class="line">        toastr.error(&apos;请选择需要限制的门店&apos;);</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  cancelFn: function(chkRes) &#123;</div><div class="line">    if(!chkRes.length)&#123;</div><div class="line">      //处理选择为空时的逻辑</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> &#125;);</div></pre></td></tr></table></figure></p>
<p>显示对话框<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">storeSltDia.show(chkedStoreData)</div></pre></td></tr></table></figure></p>
<h4 id="选择品牌"><a href="#选择品牌" class="headerlink" title="选择品牌"></a>选择品牌</h4><p>初始化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">var brandSltDia = $.powerSelectDia(&#123;</div><div class="line">    apiGetData: CONF.apiGetBrandList,</div><div class="line">    title: &apos;选择品牌&apos;,</div><div class="line">    listDataName: &apos;productBrandList&apos;,</div><div class="line">    selectMulti: true,</div><div class="line">    searchTpl: &apos;&lt;div class=&quot;form-group text-right&quot;&gt;&lt;div class=&quot;input-group&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;form-control input-sm w150 j-sales-name&quot; name=&quot;fuzzyKeyword&quot; placeholder=&quot;品牌名称&quot;&gt; &lt;span class=&quot;input-group-btn&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-primary btn-sm j-dia-search&quot;&gt;筛选&lt;/button&gt; &lt;/span&gt; &lt;/div&gt; &lt;/div&gt;&apos;,</div><div class="line">    getSearchPms: function($searchWrap) &#123;</div><div class="line">        var keywords = $.trim($searchWrap.find(&apos;[name=&quot;fuzzyKeyword&quot;]&apos;).val());</div><div class="line"></div><div class="line">        if (keywords.length &gt; 80) &#123;</div><div class="line">            toastr.warning(&apos;输入信息过长&apos;);</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return &#123;</div><div class="line">            fuzzyKeyword: keywords</div><div class="line">        &#125;;</div><div class="line">    &#125;,</div><div class="line">    getItemsDataFn: function(data) &#123;</div><div class="line">        return data.map(function(v) &#123;</div><div class="line">            return &#123;</div><div class="line">                id: v.id,</div><div class="line">                text: v.brandName || &apos;xxx&apos;</div><div class="line">            &#125;;</div><div class="line">        &#125;)</div><div class="line">    &#125;,</div><div class="line">    okFn: function(chkRes) &#123;</div><div class="line">        if (chkRes.length) &#123;</div><div class="line">            //处理选择结果</div><div class="line">        &#125; else &#123;</div><div class="line">            toastr.error(&apos;请选择需要限制的品牌&apos;);</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    cancelFn: function(chkRes) &#123;</div><div class="line">        if (!chkRes.length) &#123;</div><div class="line">            //处理选择为空的逻辑</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>显示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brandSltDia.show(chkedBrandData)</div></pre></td></tr></table></figure></p>
<h3 id="配置参数说明"><a href="#配置参数说明" class="headerlink" title="配置参数说明"></a>配置参数说明</h3><p>基本配置【选填】<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">title: &apos;请选择&apos;, //对话框标题</div><div class="line">itemsNum: 30, //每页显示的数据条数</div><div class="line">itemsBoxHeight: 210, //列表项盒子的高度</div><div class="line">width: 750, //弹出层的宽度</div><div class="line">height: 300, //弹出层的高度</div><div class="line">selectMulti: false, //是否多选</div><div class="line">showResult: false, //是否显示结果</div><div class="line">okValue: &apos;确定&apos;, //确认按钮文字</div><div class="line">cancelValue: &apos;取消&apos;, //取消按钮文字</div><div class="line">itemsStyle: &#123; width: &apos;230px&apos;, display:&apos;inline-block&apos; &#125;, //列表项的样式</div></pre></td></tr></table></figure></p>
<p>数据获取配置【必填】<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">apiGetData: &apos;&apos;, //【必填】获取数据的url</div><div class="line">listDataName: &apos;&apos;, //【必填】返回的数据对象名称</div><div class="line">getItemsDataFn: $.noop, //【必填】返回列表项目数组，格式：[&#123;id:1, text:&apos;1号店&apos;&#125;,&#123;id: 2, text: &apos;2号店&apos;&#125;]</div></pre></td></tr></table></figure></p>
<p>查询配置【选填】<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">searchTpl: &apos;&apos;, // 查询表单的模板, 没有则不添加搜索表单</div><div class="line">searchBtnSlt: &apos;.j-dia-search&apos;, //搜索按钮选择器，便于绑定查询事件</div><div class="line">getSearchPms: $.noop, //返回查询参数的json对象，就是异步请求的数据, 参数是表单的jQuery对象</div></pre></td></tr></table></figure></p>
<p>列表显示配置【选填】<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//配置是 单选 时的展示模板</div><div class="line">radioTpl: &apos;&#123;&#123;each data as item i&#125;&#125;&lt;div class=&quot;radio sltdia-item radio-primary&quot;&gt;&lt;input type=&quot;radio&quot; class=&quot;j-dia-item&quot; name=&quot;radio&quot; id=&quot;d-&#123;&#123;item.id&#125;&#125;&quot; data-id=&quot;&#123;&#123;item.id&#125;&#125;&quot; value=&quot;&#123;&#123;item.id&#125;&#125;&quot;&gt; &lt;label for=&quot;d-&#123;&#123;item.id&#125;&#125;&quot; title=&quot;&#123;&#123;item.text&#125;&#125;&quot;&gt;&#123;&#123;item.text | truncate:9&#125;&#125;&lt;/label&gt;&lt;/div&gt;&#123;&#123;/each&#125;&#125;&apos;,</div><div class="line"></div><div class="line">//配置是 多选 时的展示模板</div><div class="line">checkboxTpl: &apos;&#123;&#123;each data as item i&#125;&#125;&lt;div class=&quot;checkbox sltdia-item checkbox-primary&quot;&gt;&lt;input id=&quot;d-&#123;&#123;item.id&#125;&#125;&quot; class=&quot;j-dia-item&quot;  data-id=&quot;&#123;&#123;item.id&#125;&#125;&quot; type=&quot;checkbox&quot; value=&quot;&#123;&#123;item.id&#125;&#125;&quot;&gt; &lt;label for=&quot;d-&#123;&#123;item.id&#125;&#125;&quot; title=&quot;&#123;&#123;item.text&#125;&#125;&quot;&gt;&#123;&#123;item.text | truncate:9&#125;&#125;&lt;/label&gt; &lt;/div&gt;&#123;&#123;/each&#125;&#125;&apos;,</div><div class="line"></div><div class="line">//显示 选择结果 的模板</div><div class="line">checkResTpl: &apos;&#123;&#123;each data as item i&#125;&#125;&lt;span id=&quot;res-&#123;&#123;item.id&#125;&#125;&quot;&gt;&#123;&#123;item.text&#125;&#125;、&lt;/span&gt;&#123;&#123;/each&#125;&#125;&apos;,</div></pre></td></tr></table></figure></p>
<p>回调函数配置</p>
<p>用于返回选择对话框选择的结果，如果 <code>okFn</code> 返回 <code>false</code>，则对话框不会关闭，可用于检查或限制用户选择项的数量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">okFn: $.noop, //确定的回调，参数是选择的数据组成的数组</div><div class="line">cancelFn: $.noop, //取消的回调，参数是选择的数据组成的数组</div><div class="line">shownAfterFn: $.noop, //对话框显示之后的回调，可以注册一些事件，参数是对话框的jQuery对象</div></pre></td></tr></table></figure></p>
<p>容器模板【选填】<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">contentTpl: <span class="string">'&lt;div class="sltdia-inner"&gt;\</span></div><div class="line">    &lt;form class="sltdia-search form-inline j-dia-searchbox text-right mb10"&gt;&lt;/form&gt;\</div><div class="line">    &lt;div class="sltdia-items j-dia-list"&gt;&lt;/div&gt;\</div><div class="line">    &lt;div class="sltdia-page"&gt;\</div><div class="line">        &lt;div class="text-right"&gt;\</div><div class="line">            &lt;nav&gt;&lt;ul class="pagination mt10 j-dia-page"&gt;&lt;/ul&gt;&lt;/nav&gt;\</div><div class="line">        &lt;/div&gt;\</div><div class="line">    &lt;/div&gt;\</div><div class="line">    &lt;div class="sltdia-result" style="max-height:50px; overflow-y:scroll;"&gt;&lt;/div&gt;\</div><div class="line">    &lt;/div&gt;'</div></pre></td></tr></table></figure></p>
<h3 id="方法Methods"><a href="#方法Methods" class="headerlink" title="方法Methods"></a>方法Methods</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dia.show(dataArr)</div><div class="line">//dataArr用于编辑时，传递已经选择的数据，格式为[&#123;id:1, text:xxx&#125;, &#123;id:2,text:xxx&#125;,...]，如果是单选只传递具有一个元素的数据即可</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xi480.com1.z0.glb.clouddn.com/T1796WE497J8.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;多功能弹出层封装了通用的大数据选择查询逻辑，解决项目中各处需要频繁用到选择品牌、商品、门店、导购的选择对话框的需求。&lt;br&gt;
    
    </summary>
    
      <category term="web开发" scheme="http://www.qiakr.com/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>洽客官网Node项目说明</title>
    <link href="http://www.qiakr.com/2016/11/07/qiakr-node/"/>
    <id>http://www.qiakr.com/2016/11/07/qiakr-node/</id>
    <published>2016-11-07T02:34:16.000Z</published>
    <updated>2016-11-07T03:37:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xi480.com1.z0.glb.clouddn.com/53955a3ac8b93.jpg" alt=""><br>基于Node + Express的前后端分离项目说明<br><a id="more"></a></p>
<h2 id="目录设计"><a href="#目录设计" class="headerlink" title="目录设计"></a>目录设计</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── app.js                      - 服务启动主文件</div><div class="line">├── config.dev.js               - 开发环境配置</div><div class="line">├── config.js                   - 环境配置</div><div class="line">├── config.pro.js               - 生成环境配置</div><div class="line">├── db                          - MongoDB数据库文件</div><div class="line">├── log4js.config.js            - 日志配置</div><div class="line">├── logs                        - 日志记录</div><div class="line">├── package.json</div><div class="line">├── server                      - 服务端相关</div><div class="line">│   ├── api                     - 数据接口层</div><div class="line">│   ├── common                  - 公用工具</div><div class="line">│   ├── controllers             - 控制器</div><div class="line">│   ├── middlerware             - 数据请求中间件</div><div class="line">│   ├── mock                    - 接口数据模拟层</div><div class="line">│   ├── models                  - MongoDB数据模型层</div><div class="line">│   ├── service                 - 数据服务层</div><div class="line">│   ├── views                   - 视图层</div><div class="line">│   │   ├── includes</div><div class="line">│   │   ├── layout</div><div class="line">│   │   └── pages</div><div class="line">│   ├── api.router.js           - 数据接口路由</div><div class="line">│   └── web.router.js           - 页面请求路由</div><div class="line">├── static                      - 静态资源相关</div><div class="line">│   ├── home</div><div class="line">│   ├── home_admin</div><div class="line">│   ├── home_mobile</div><div class="line">│   ├── libs</div><div class="line">│       └── qk.config.js</div><div class="line">└── test                        - 测试相关</div></pre></td></tr></table></figure>
<h2 id="Views目录说明"><a href="#Views目录说明" class="headerlink" title="Views目录说明"></a>Views目录说明</h2><p><img src="http://7xi480.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-03%20%E4%B8%8A%E5%8D%8810.43.18.jpg" width="500"></p>
<p><code>pages</code> 目录下按项目目录划分，一个项目一个目录，每个项目可以使用不同的技术框架，由express调用相关的渲染引擎渲染。</p>
<h2 id="static-静态资源目录"><a href="#static-静态资源目录" class="headerlink" title="static 静态资源目录"></a>static 静态资源目录</h2><p><img src="http://7xi480.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-03%20%E4%B8%8A%E5%8D%8810.44.09.jpg" width="500"></p>
<p>按项目资源存放，模块化的项目按页面模块与页面模板目录存放</p>
<h2 id="数据流转"><a href="#数据流转" class="headerlink" title="数据流转"></a>数据流转</h2><p><img src="http://7xi480.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-07%20%E4%B8%8A%E5%8D%8811.33.26.png" alt=""></p>
<p><code>service</code> 层调用 <code>node-zookeeper-dubbo-qk</code> 模块去连接 <code>zookeeper</code> 获取服务器地址，然后通过 <code>socket</code> 连接服务器获取dubbo服务，通过<code>dubbo</code> 服务调用api获取数据，返回给api层，api层对数据进预处理，然后返回给客户端。</p>
<h2 id="后台渲染引擎"><a href="#后台渲染引擎" class="headerlink" title="后台渲染引擎"></a>后台渲染引擎</h2><p>官网是多页面应用，为了尽可能的提取公用的片段，制作母版页而采用了jade模板，后台管理页面是一个spa应用，采用了artTemplate模板渲染，以便更快的编写模板，免去jade模板的学习成本。</p>
<p>项目中可以使用两种模板：</p>
<ul>
<li>以<code>.jade</code> 为后缀文件会自动调用 <code>jade</code> 去渲染</li>
<li>以<code>.html</code>为后缀的文件会自动调用 <code>artTemplate</code> 去渲染</li>
</ul>
<h2 id="新增一个服务"><a href="#新增一个服务" class="headerlink" title="新增一个服务"></a>新增一个服务</h2><ol>
<li>去 <code>service</code> 层注册一个服务，指定接口与调用参数，与java的 <code>dubbo</code>服务一一对应</li>
<li>去 <code>api</code> 层添加数据接口</li>
<li>如果<code>views</code>层有需要该服务提供相关数据时，去 <code>controller</code> 层引入 <code>service</code>层获取数据去渲染页面。</li>
<li>去<code>api.router.js</code> 注册接口路由，对外提供接口服务</li>
<li>编写页面相关逻辑，去 <code>web.router.js</code> 注册页面路由</li>
</ol>
<h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><p><code>api</code> 层 :           a<em> + 业务名称<br><code>controller</code> 层:  c</em> + 业务名称<br><code>service</code> 层:      s_ + 业务名称</p>
<h2 id="配置环境拆分"><a href="#配置环境拆分" class="headerlink" title="配置环境拆分"></a>配置环境拆分</h2><p>不同的环境 端口，数据库，各种服务都有不同的配置，也有相同的配置，分为不同的文件来管理</p>
<p><code>config.js</code> 不同环境下的公共配置<br><code>config.dev.js</code> 开发环境下的配置<br><code>config.pro.js</code> 生产环境下的配置</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xi480.com1.z0.glb.clouddn.com/53955a3ac8b93.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;基于Node + Express的前后端分离项目说明&lt;br&gt;
    
    </summary>
    
      <category term="web开发" scheme="http://www.qiakr.com/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>VueJS多页项目应用</title>
    <link href="http://www.qiakr.com/2016/11/03/vue-multi-page/"/>
    <id>http://www.qiakr.com/2016/11/03/vue-multi-page/</id>
    <published>2016-11-02T16:06:38.000Z</published>
    <updated>2016-11-02T16:09:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xi480.com1.z0.glb.clouddn.com/623_4.jpg?imageView2/1/w/720/h/400" alt=""><br>vue.js2.0的多页应用脚手架<br><a id="more"></a></p>
<h2 id="必备知识点"><a href="#必备知识点" class="headerlink" title="必备知识点"></a>必备知识点</h2><ul>
<li><code>Vue.js2.0</code> <a href="https://vuefe.cn/guide/" target="_blank" rel="external">中文文档</a> </li>
<li><code>Vuex</code> 状态管理 <a href="https://vuefe.cn/vuex/" target="_blank" rel="external">中文文档</a></li>
<li><code>Vue-router</code> 路由管理  <a href="https://router.vuejs.org/zh-cn/index.html" target="_blank" rel="external">中文文档</a></li>
<li><code>Vue-resource</code> 异步请求处理 <a href="https://github.com/vuejs/vue-resource/blob/master/docs/api.md" target="_blank" rel="external">中文文档</a></li>
<li><code>ES6</code> 语法特性 <a href="http://es6.ruanyifeng.com/#README" target="_blank" rel="external">阮一峰教程</a></li>
</ul>
<h2 id="ES6常用特性"><a href="#ES6常用特性" class="headerlink" title="ES6常用特性"></a>ES6常用特性</h2><p><a href="http://coderlt.coding.me/qkfe/2016/11/02/ES6-base/" target="_blank" rel="external">点此查看</a></p>
<h2 id="Vuex基础介绍"><a href="#Vuex基础介绍" class="headerlink" title="Vuex基础介绍"></a>Vuex基础介绍</h2><p><a href="http://coderlt.coding.me/qkfe/2016/11/02/vuex-base/" target="_blank" rel="external">点此查看</a></p>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>项目目录<br><img width="500" src="http://7xi480.com1.z0.glb.clouddn.com/%E7%BB%8F%202016-11-02%20%E4%B8%8B%E5%8D%882.54.10.jpg"></p>
<p>状态管理目录<br><img width="500" src="http://7xi480.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-02%20%E4%B8%8B%E5%8D%882.55.27.png"></p>
<p>主要目录说明</p>
<ul>
<li><code>api</code> 目录：集中管理整个应用的api数据请求</li>
<li><code>filters</code> 目录：注册Vue全局的filter，便于在所有页面中使用</li>
<li><code>components</code> 目录：存放多个页面共用的Vue组件</li>
<li><code>modules</code> 目录：管理每个独立的页面（频道）</li>
<li><code>store</code> 目录：管理应用的全局状态</li>
</ul>
<h2 id="页面划分"><a href="#页面划分" class="headerlink" title="页面划分"></a>页面划分</h2><p><img width="500" src="http://7xi480.com1.z0.glb.clouddn.com/22016-11-02%20%E4%B8%8B%E5%8D%882.55.12.jpg"></p>
<p><code>modules</code> 下每一个目录是一个独立的SPA页面的相关资源，把项目划分为多个频道，一个SPA页面为一个频道，每个频道下的相关子页面放置于views目录中</p>
<p>好处是不同的频道可由不同的人开发，互不干扰，技术方案也可以不同，比如可不用vue-router、vuex等相关插件，结合jQuery或者其它路由管理模块使用，只把vue做为页面资源模块加载和容器也是可以的。</p>
<h2 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h2><p>使用懒加载的方式加载路由对应的组件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> SupplierData = <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'./views/supplier-data.vue'</span>], resolve)</div><div class="line"><span class="keyword">const</span> SupplierList = <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'./views/supplier-list.vue'</span>], resolve)</div><div class="line"><span class="keyword">const</span> SupplierSetup = <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'./views/supplier-setup.vue'</span>], resolve)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</div><div class="line">  &#123;</div><div class="line">   <span class="attr">path</span>: <span class="string">'/'</span>,</div><div class="line">   <span class="attr">meta</span>:<span class="string">'首页'</span>,</div><div class="line">   <span class="attr">redirect</span>: <span class="string">'/data'</span>,</div><div class="line">  &#125;&#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'/data'</span>,</div><div class="line">    <span class="attr">meta</span>:<span class="string">'商户数据'</span>,</div><div class="line">    <span class="attr">component</span>: SupplierData,</div><div class="line">  &#125;,&#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'/list'</span>,</div><div class="line">    <span class="attr">meta</span>: <span class="string">'商户列表'</span>,</div><div class="line">    <span class="attr">component</span>: SupplierList,</div><div class="line">  &#125;,&#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'/setup'</span>,</div><div class="line">    <span class="attr">meta</span>: <span class="string">'商户设置'</span>,</div><div class="line">    <span class="attr">component</span>: SupplierSetup,</div><div class="line">  &#125;</div><div class="line">];</div></pre></td></tr></table></figure></p>
<p>给路由注册全局的钩子，用于显示loading指示页面的切换状态</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span> , next</span>) =&gt;</span> &#123;</div><div class="line">  store.commit(<span class="string">'UPDATE_LOADING'</span>, &#123;<span class="attr">loading</span>: <span class="literal">true</span> &#125;)</div><div class="line">  next()</div><div class="line">&#125;)</div><div class="line"></div><div class="line">router.afterEach(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</div><div class="line">  store.commit(<span class="string">'UPDATE_LOADING'</span>, &#123;<span class="attr">loading</span>: <span class="literal">false</span> &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="Vuex数据流转"><a href="#Vuex数据流转" class="headerlink" title="Vuex数据流转"></a>Vuex数据流转</h2><p><img src="http://7xi480.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-02%20%E4%B8%8B%E5%8D%8811.34.57.png" alt=""></p>
<p>使用Vuex集中管理页面组件的状态，在编写组件时，将 <code>store</code> 中的 <code>Getters/State/Mutaions/Actions</code> 映射至组件，组件的事件操作触发Actions或Mutations来更新所绑定的状态数据，从而触发UI的更新。</p>
<ul>
<li><code>getters</code> 返回 store 中computed 属性</li>
<li><code>state</code> 返回 store 中状态属性 data</li>
<li><code>mutations</code> 返回唯一同步改变state的方法</li>
<li><code>actions</code> 返回异步获取数据提交commit更新state的方法</li>
</ul>
<h2 id="RESTful-API设计"><a href="#RESTful-API设计" class="headerlink" title="RESTful API设计"></a>RESTful API设计</h2><p><code>REST(Representational State Transfer)</code> 的名称”表现层状态转化”中，省略了主语。”表现层”其实指的是”资源”（Resources）的”表现层”。</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol>
<li>每一个URI代表一种资源；</li>
<li>客户端和服务器之间，传递这种资源的某种表现层；</li>
<li>客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。</li>
</ol>
<h3 id="HTTP动词"><a href="#HTTP动词" class="headerlink" title="HTTP动词"></a>HTTP动词</h3><p>使用 <code>HTTP动词</code> 来区别对数据的操作：</p>
<ul>
<li>GET（SELECT）：从服务器取出资源（一项或多项）。</li>
<li>POST（CREATE）：在服务器新建一个资源。</li>
<li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的 完整资源）。</li>
<li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的 属性）。</li>
<li>DELETE（DELETE）：从服务器删除资源。</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>一级API<br>GET /users - 获取用户列表<br>GET /users/1 - 获取 Id 为 1 的用户<br>POST /users - 创建一个用户<br>PUT /users/1 - 替换 Id 为 1 的用户<br>PATCH /users/1 - 修改 Id 为 1 的用户<br>DELETE /users/1 - 删除 Id 为 1 的用户</p>
<p>多级API<br>GET /users/1/products - 获取 Id 为 1 用户下的产品列表<br>GET /users/1/products/2 - 获取 Id 为 1 用户下 Id 为 2 的产品<br>POST /users/1/products - 在 Id 为 1 用户下，创建一个产品<br>PUT /users/1/products/2 - 在 Id 为 1 用户下，替换 Id 为 2 的产品<br>PATCH /users/1/products/2 - 修改 Id 为 1 的用户下 Id 为 2 的产品<br>DELETE /users/1/products/2 - 删除 Id 为 1 的用户下 Id 为 2 的产品</p>
<h3 id="注册与登录的API设计"><a href="#注册与登录的API设计" class="headerlink" title="注册与登录的API设计"></a>注册与登录的API设计</h3><p>登录/登出对应的服务端资源应该是session操作，所以相关api应该如下：</p>
<ul>
<li>GET /session           获取会话信息</li>
<li>PUT /session           更新会话信息 (心跳)</li>
<li>POST /session         创建新的会话（登入）</li>
<li>DELETE /session     销毁当前会话（登出）</li>
</ul>
<p>注册对应的资源是user</p>
<ul>
<li>GET /user/:id 获取id用户的信息</li>
<li>PUT /user/:id 更新id用户的信息</li>
<li>POST /user 创建新的用户（注册）</li>
<li>DELETE /user/:id 删除id用户（注销）</li>
</ul>
<h3 id="结合Vue-resource"><a href="#结合Vue-resource" class="headerlink" title="结合Vue-resource"></a>结合Vue-resource</h3><p>使用 vue-resource 对API进行集中式管理</p>
<p>vue-resource 对应restful的操作<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">get: &#123;method: 'GET'&#125;,</div><div class="line">save: &#123;method: 'POST'&#125;,</div><div class="line">query: &#123;method: 'GET'&#125;,</div><div class="line">update: &#123;method: 'PUT'&#125;,</div><div class="line">remove: &#123;method: 'DELETE'&#125;,</div><div class="line">delete: &#123;method: 'DELETE'&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//api.js</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> VueResource <span class="keyword">from</span> <span class="string">'vue-resource'</span></div><div class="line"></div><div class="line">Vue.use(VueResource)</div><div class="line">Vue.http.options.emulateJSON = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> apiMenus = Vue.resource(<span class="string">'/api/menus'</span>)</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> apiSession = Vue.resource(<span class="string">'/api/session&#123;/id&#125;'</span>)</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> apiUser = Vue.resource(<span class="string">'/api/user&#123;/id&#125;'</span>)</div></pre></td></tr></table></figure>
<p>在actions中导入api模块进行异步请求操作</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; apiSession, apiMenus &#125; <span class="keyword">from</span> <span class="string">'../../../api/'</span></div><div class="line"></div><div class="line">apiSession.save(&#123;<span class="attr">uName</span>:<span class="string">''</span>, <span class="attr">password</span>: <span class="string">''</span>&#125;).then().catch()</div><div class="line">apiSession.get().then().catch()</div><div class="line">apiSession.put(&#123;<span class="attr">state</span>: <span class="number">1</span>&#125;).then().catch()</div><div class="line">apiSession.delete().then().catch()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xi480.com1.z0.glb.clouddn.com/623_4.jpg?imageView2/1/w/720/h/400&quot; alt=&quot;&quot;&gt;&lt;br&gt;vue.js2.0的多页应用脚手架&lt;br&gt;
    
    </summary>
    
      <category term="web开发" scheme="http://www.qiakr.com/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="js" scheme="http://www.qiakr.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Vuex基础入门</title>
    <link href="http://www.qiakr.com/2016/11/02/vuex-base/"/>
    <id>http://www.qiakr.com/2016/11/02/vuex-base/</id>
    <published>2016-11-02T07:46:24.000Z</published>
    <updated>2017-02-12T14:46:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xi480.com1.z0.glb.clouddn.com/6W8NZET5PS6V.jpg?imageView2/1/w/720/h/400" alt=""><br>多组件共用相同的状态时，在深层嵌套组件间传递属性过于冗长，并且不能简单地在同级别的组件间传递，直接引用 父/子 实例，又或是通过事件来修改和同步多份状态副本。这样的模型是脆弱的，代码很快会变得不可维护。<br>理解Vue组件之间的数据传递关系到应用的健壮性和可维护性。<br><a id="more"></a></p>
<h3 id="通信原则-Props-Down-Events-Up"><a href="#通信原则-Props-Down-Events-Up" class="headerlink" title="通信原则 Props Down  Events Up"></a>通信原则 Props Down  Events Up</h3><p>父组件向子组件传递数据使用 props<br>子组件向父组件传递数据使用 event</p>
<h3 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h3><p>组件实例的作用域是孤立的<br>不应该在子组件的模板内直接引用父组件的数据</p>
<p><code>prop</code> 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。这是为了防止子组件无意修改了父组件的状态——<br>这会让应用的数据流难以理解。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在父组件中使用props传递给子组件</span></div><div class="line">&lt;child message=<span class="string">"hello!"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">//定义子组件</span></div><div class="line">Vue.component(<span class="string">'child'</span>, &#123;</div><div class="line">  <span class="comment">// 声明 props</span></div><div class="line">  props: [<span class="string">'message'</span>],</div><div class="line">  <span class="comment">// props可以像data一样，使用this.message访问</span></div><div class="line">  template: <span class="string">'&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><p>在父组件中使用指令 v-on:cusEvent 绑定自定义事件<br>在子组件中使用指令 v-on:click=”this.$emit(‘cusEvent’, args1, args2 )” 来触发父组件的事件，并传递参数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//父组件绑定自定义事件increment</span></div><div class="line">&lt;button-counter v-on:increment=<span class="string">"incrementTotal"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span></div><div class="line"></div><div class="line">//子组件通过this.$emit('increment')触发父组件绑定的事件</div><div class="line">Vue.component('button-counter', &#123;</div><div class="line">  template: '<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"increment"</span>&gt;</span>&#123;&#123; counter &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span>',</div><div class="line">  data: function () &#123;</div><div class="line">    return &#123;</div><div class="line">      counter: 0</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    increment: function () &#123;</div><div class="line">      this.counter += 1</div><div class="line">      this.$emit('increment')</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="全局事件总线-global-event-bus"><a href="#全局事件总线-global-event-bus" class="headerlink" title="全局事件总线(global event bus)"></a>全局事件总线(global event bus)</h3><p>在父组件中利用vue实例的<code>$on</code>注册一个事件，在子组件中使用vue实例的<code>$emit</code>来触发父组件中的事件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bus = <span class="keyword">new</span> Vue()</div><div class="line"></div><div class="line"><span class="comment">//父组件中注册一个自定义事件 id-selected</span></div><div class="line">bus.$on(<span class="string">'id-selected'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//在子组件中触发事件id-selected并传递数据id</span></div><div class="line">bus.$emit(<span class="string">'id-selected'</span>, <span class="number">1</span>)</div></pre></td></tr></table></figure>
<p><strong>避免使用 <code>vm.$parent / vm.$root / vm.$children</code></strong></p>
<h3 id="状态管理器-Vuex"><a href="#状态管理器-Vuex" class="headerlink" title="状态管理器 Vuex"></a>状态管理器 Vuex</h3><p>一个专门为 Vue.js 应用设计的 状态管理模型 + 库<br>为应用内的所有组件提供集中式存储服务，其中的规则确保状态只能按预期方式</p>
<p>在 vue 应用中，vuex 就充当了数据提供者的角色，vue 则只需要关注页面的展示与交互。</p>
<p><img width="400" src="https://vuex.vuejs.org/zh-cn/images/flow.png"></p>
<p>state (状态)，驱动我们应用的真实的源；<br>view (视图)，对应着 状态 的声明式映射；<br>actions (动作)，用户在 视图 上的输入引起状态的更改的可能方式。</p>
<h4 id="Vuex-核心概念"><a href="#Vuex-核心概念" class="headerlink" title="Vuex 核心概念"></a>Vuex 核心概念</h4><p>应用场景<br>页面状态数据：路由、加载状态、异步数据、开关、分页页码、表单数据</p>
<p><img src="https://vuex.vuejs.org/zh-cn/images/vuex.png" alt=""></p>
<h5 id="state-（-store-的-data）"><a href="#state-（-store-的-data）" class="headerlink" title="state （ store 的 data）"></a>state （ store 的 data）</h5><p>存放整个应用状态，作为应用的唯一数据源驱动UI视图的更新<br>尽量初始化详细的state数据</p>
<p>组件中直接访问<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">  count () &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.count</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用工具函数 <code>mapSate</code> 访问<br>用于将独立的state数据映射到组件的 <code>computed</code> 属性中</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  computed: mapState(&#123;</div><div class="line">    <span class="comment">// 箭头函数可以让代码非常简洁</span></div><div class="line">    count: <span class="function"><span class="params">state</span> =&gt;</span> state.count,</div><div class="line">    <span class="comment">// 传入字符串 'count' 等同于 `state =&gt; state.count`</span></div><div class="line">    countAlias: <span class="string">'count'</span>,</div><div class="line">    <span class="comment">// 想访问局部状态，就必须借助于一个普通函数，函数中使用 `this` 获取局部状态</span></div><div class="line">    countPlusLocalState (state) &#123;</div><div class="line">      <span class="keyword">return</span> state.count + <span class="keyword">this</span>.localCount</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h5 id="actions-（-store-的-methods）"><a href="#actions-（-store-的-methods）" class="headerlink" title="actions （ store 的 methods）"></a>actions （ store 的 methods）</h5><p>不改变状态，只提交(commit) mutation。<br>可以包含任意异步操作。</p>
<p>组件中直接访问<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mounted()&#123;</div><div class="line">	<span class="keyword">this</span>.$store.dispatch(<span class="string">'getUserData'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>工具函数 <code>mapActions</code> 访问<br>用于将action方法映射到组件的 <code>methods</code> 中</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  methods: &#123;</div><div class="line">    ...mapActions([</div><div class="line">      <span class="string">'increment'</span> <span class="comment">// 映射 this.increment() 到 this.$store.dispatch('increment')</span></div><div class="line">    ]),</div><div class="line">    ...mapActions(&#123;</div><div class="line">      <span class="attr">add</span>: <span class="string">'increment'</span> <span class="comment">// map this.add() to this.$store.dispatch('increment')</span></div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="mutations-（-store-的-methods）"><a href="#mutations-（-store-的-methods）" class="headerlink" title="mutations （ store 的 methods）"></a>mutations （ store 的 methods）</h5><p>定义了 <strong>同步</strong> 改变 <code>state</code> 的唯一方法<br>在store中，实际改变 状态(state) 的唯一方式是通过 提交(commit) 一个 mutation</p>
<p>组件中使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">methods:&#123;</div><div class="line">	add()&#123;</div><div class="line">		<span class="keyword">this</span>.$store.commit(<span class="string">'ADD_NUMBER'</span>,&#123;<span class="attr">num</span>: <span class="number">1</span>&#125;)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用工具函数 <code>mapMutations</code><br>将mutation映射到组件的 methods 中</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  methods: &#123;</div><div class="line">    ...mapMutations(&#123;</div><div class="line">      <span class="attr">add</span>: <span class="string">'increment'</span> <span class="comment">// 映射 this.add() 到 this.$store.commit('increment')</span></div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="getters-（-store-的-computed）"><a href="#getters-（-store-的-computed）" class="headerlink" title="getters  （ store 的 computed）"></a>getters  （ store 的 computed）</h5><p>和计算属性功能相同，基于多个状态生成新的状态</p>
<p>组件中使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">  doneTodosCount () &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$store.getters.doneTodosCount</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>工具函数 <code>mapGetters</code><br>用于将getter属性映射到组件的computed中</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  computed: &#123;</div><div class="line">    <span class="comment">// 使用对象扩展操作符把 getter 混入到 computed 中</span></div><div class="line">    ...mapGetters([</div><div class="line">      <span class="string">'doneTodosCount'</span>,</div><div class="line">      <span class="string">'anotherGetter'</span>,</div><div class="line">      <span class="comment">// ...</span></div><div class="line">    ])</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>组件仍然可以具有局部状态</p>
<p>使用 Vuex 并不意味你应该把 所有 状态都放在 Vuex 中去管理。尽管把更多的状态放到 Vuex 管理，会让状态变化变得更加清晰和可调试，但有时也能使代码变得冗余和不直观。如果某部分状态严格属于一个单独的组件，那就只把这部分状态作为局部状态就好了。</p>
<p>理解：状态分为 <strong>应用级状态</strong> 和 <strong>组件级状态</strong><br>原子类组件，尽量由父组件传递状态数据使用<br>当组件状态不影响父组件和其它同级组件时，可做为组件内部状态<br>页面级的数据应该做为应用级状态管理</p>
<p>Redux 的作者有一句话说的不错(redux与vuex都是在flux模式上的改进)：<br>原文：Flux libraries are like glasses: you’ll know when you need them.<br>译文：Flux 库就像眼镜：当你需要它们的时候你会懂的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xi480.com1.z0.glb.clouddn.com/6W8NZET5PS6V.jpg?imageView2/1/w/720/h/400&quot; alt=&quot;&quot;&gt;&lt;br&gt;多组件共用相同的状态时，在深层嵌套组件间传递属性过于冗长，并且不能简单地在同级别的组件间传递，直接引用 父/子 实例，又或是通过事件来修改和同步多份状态副本。这样的模型是脆弱的，代码很快会变得不可维护。&lt;br&gt;理解Vue组件之间的数据传递关系到应用的健壮性和可维护性。&lt;br&gt;
    
    </summary>
    
      <category term="web开发" scheme="http://www.qiakr.com/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="js" scheme="http://www.qiakr.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>ES6常用特性</title>
    <link href="http://www.qiakr.com/2016/11/02/ES6-base/"/>
    <id>http://www.qiakr.com/2016/11/02/ES6-base/</id>
    <published>2016-11-02T07:44:21.000Z</published>
    <updated>2016-11-02T16:17:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xi480.com1.z0.glb.clouddn.com/1-131209160307.jpg?imageView2/1/w/720/h/400" alt=""><br>这里列出在项目中常用的ES6相关特性，以便更快的理解和应用ES6。</p>
<a id="more"></a>
<h3 id="常用特性"><a href="#常用特性" class="headerlink" title="常用特性"></a>常用特性</h3><ul>
<li>作用域控制 let、const</li>
<li>模板字符串</li>
<li>语法糖 - 箭头函数</li>
<li>解构</li>
<li>类与模块</li>
<li>Promise</li>
</ul>
<h3 id="let-amp-const"><a href="#let-amp-const" class="headerlink" title="let &amp; const"></a>let &amp; const</h3><ul>
<li><code>const</code> 不可重新赋值的值 (常量、配置项以及引用的组件)</li>
<li><code>let</code> 使用let声明的变量只在语句块内有效</li>
</ul>
<p><code>let</code> 的使用场景相对较少的，我们只会在 loop(for，while 循环)及少量必须重定义的变量上用到他</p>
<p><strong>let 的使用场景</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 函数体内的变量</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> n = <span class="number">5</span>;</div><div class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">    <span class="keyword">let</span> n = <span class="number">10</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(n); <span class="comment">// 5</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// for循环的初始量</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; buttons.length; i++) &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>const</code> 由于不可以重新赋值的特性，所以可以做更多语法静态分析方面的优化，从而有更高的执行效率。</p>
<p><strong>const 的使用场景</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义常量</span></div><div class="line"><span class="keyword">const</span> REG_GET_INPUT = <span class="regexp">/^\d&#123;1,3&#125;$/</span>;</div><div class="line"></div><div class="line"><span class="comment">// 定义配置项</span></div><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">  <span class="attr">isDev</span> : <span class="literal">false</span>,</div><div class="line">  <span class="attr">pubDir</span>: <span class="string">'./admin/'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 引入 gulp</span></div><div class="line"><span class="keyword">const</span> gulp    = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div></pre></td></tr></table></figure></p>
<h3 id="模板字符串-Template-Strings"><a href="#模板字符串-Template-Strings" class="headerlink" title="模板字符串 Template Strings"></a>模板字符串 Template Strings</h3><p>增强版的字符串，用反引号（`）标识，支持变量注入与多行文本</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. 注入变量与方法</span></div><div class="line"><span class="keyword">const</span> start = <span class="string">'hi all'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> getName = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'jelly'</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> conf = &#123;</div><div class="line">  <span class="attr">fav</span>: <span class="string">'Coding'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> msg = <span class="string">`<span class="subst">$&#123;start&#125;</span>, my name is <span class="subst">$&#123;getName()&#125;</span>, <span class="subst">$&#123;conf.fav&#125;</span> is my favourite`</span>;</div><div class="line"></div><div class="line"><span class="comment">// 2. 与引号混用</span></div><div class="line"><span class="keyword">const</span> wantToSay = <span class="string">`I'm a "tbfed"`</span>;</div><div class="line"></div><div class="line"><span class="comment">// 3. 支持多行文本</span></div><div class="line"><span class="keyword">const</span> slogan = </div><div class="line"><span class="string">`</span></div><div class="line">I have a dream today!</div><div class="line">`;</div><div class="line"></div><div class="line"><span class="comment">// 4. 比较适合写HTML</span></div><div class="line"><span class="keyword">const</span> resultTpl = </div><div class="line"><span class="string">`</span></div><div class="line">  &lt;section&gt;</div><div class="line">    &lt;div&gt;...&lt;/div&gt;</div><div class="line">  &lt;/section&gt;</div><div class="line">`;</div></pre></td></tr></table></figure>
<h3 id="箭头函数-Arrow-Function"><a href="#箭头函数-Arrow-Function" class="headerlink" title="箭头函数 Arrow Function"></a>箭头函数 Arrow Function</h3><p>使用箭头(=&gt;)进行定义的函数，属于匿名函数（Lambda）一类</p>
<p>箭头函数没有独立执行上下文（ this ），所以其内部引用 this 对象会直接访问父级。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 完整写法</span></div><div class="line"><span class="keyword">const</span> getOptions = <span class="function">(<span class="params">name, key</span>) =&gt;</span> &#123;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 省略参数括号</span></div><div class="line"><span class="keyword">const</span> getOptions = <span class="function"><span class="params">key</span> =&gt;</span> &#123;</div><div class="line">  ... </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 省略参数和方法体括号</span></div><div class="line"><span class="keyword">const</span> getOptions = <span class="function"><span class="params">key</span> =&gt;</span> <span class="built_in">console</span>.log(key);</div><div class="line"></div><div class="line"><span class="comment">// 无参数或方法体，括号不能省略</span></div><div class="line"><span class="keyword">const</span> noop = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 应用示例</span></div><div class="line"><span class="keyword">let</span> names = [ <span class="string">'Will'</span>, <span class="string">'Jack'</span>, <span class="string">'Peter'</span>, <span class="string">'Steve'</span>, <span class="string">'John'</span>, <span class="string">'Hugo'</span>, <span class="string">'Mike'</span> ]</div><div class="line"></div><div class="line"><span class="keyword">let</span> newSet = names</div><div class="line">  .map(<span class="function">(<span class="params">name, index</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">id</span>: index,</div><div class="line">      <span class="attr">name</span>: name</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">  .filter(<span class="function"><span class="params">man</span> =&gt;</span> man.id % <span class="number">2</span> == <span class="number">0</span>)</div><div class="line">  .map(<span class="function"><span class="params">man</span> =&gt;</span> [man.name])</div><div class="line">  .reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.concat(b))</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(newSet) <span class="comment">//=&gt; [ 'Will', 'Peter', 'John', 'Mike' ]</span></div></pre></td></tr></table></figure>
<h3 id="解构-Destructuring"><a href="#解构-Destructuring" class="headerlink" title="解构 Destructuring"></a>解构 Destructuring</h3><p>用于分解方法的参数、数组、对象中的变量</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> bookSet = [<span class="string">'UED'</span>, <span class="string">'TB fed'</span>, <span class="string">'Not find'</span>];</div><div class="line"><span class="keyword">const</span> bookCollection = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> &#123;<span class="attr">book1</span>: <span class="string">'UED'</span>, <span class="attr">book2</span>: <span class="string">'TB fed'</span>&#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 1. 解构也可以设置默认值</span></div><div class="line"><span class="keyword">const</span> &#123;book1, book3 = <span class="string">'Not find'</span>&#125; = bookCollection();</div><div class="line"></div><div class="line"><span class="comment">// 2. 解构数组时候是可以跳过其中某几项的</span></div><div class="line"><span class="keyword">const</span> [book1,,book3] = bookSet;  <span class="comment">// book1 = 'UED', book3 = 'Not find'</span></div><div class="line"></div><div class="line"><span class="comment">// 3. 解构可以取到指定对象的任何属性，包括它包含的方法</span></div><div class="line"><span class="keyword">const</span> &#123;<span class="attr">length</span>: setLength&#125; = bookSet;  <span class="comment">// setLength = 3</span></div></pre></td></tr></table></figure>
<h4 id="Rest运算符（解构赋值）-Spread扩展运算符（…）"><a href="#Rest运算符（解构赋值）-Spread扩展运算符（…）" class="headerlink" title="Rest运算符（解构赋值）/  Spread扩展运算符（…）"></a>Rest运算符（解构赋值）/  Spread扩展运算符（…）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. rest 得到的是一个真正的数组而不是一个伪数组</span></div><div class="line"><span class="keyword">const</span> getOptions = <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(args.join); <span class="comment">// function</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 2. rest 可以配合箭头函数使用，达到取得所有参数的目的</span></div><div class="line"><span class="keyword">const</span> getOptions = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(args); <span class="comment">// array</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 3. spread 可以用于解构时，聚合所得的值</span></div><div class="line"><span class="keyword">const</span> [opt1, ...opts] = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'four'</span>];</div><div class="line"></div><div class="line"><span class="comment">// 4. spread 可以用于数组定义</span></div><div class="line"><span class="keyword">const</span> opts = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'four'</span>];</div><div class="line"><span class="keyword">const</span> config = [<span class="string">'other'</span>, ...opts];</div></pre></td></tr></table></figure>
<h3 id="类与模块-Class-amp-Modules"><a href="#类与模块-Class-amp-Modules" class="headerlink" title="类与模块 Class &amp; Modules"></a>类与模块 Class &amp; Modules</h3><p> <strong><code>class</code> 定义一个类</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="comment">//构造函数</span></div><div class="line">  <span class="keyword">constructor</span>(x, y) &#123;</div><div class="line">	<span class="comment">//实例属性</span></div><div class="line">    <span class="keyword">this</span>.x = x;</div><div class="line">    <span class="keyword">this</span>.y = y;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//get和set用于对实例属性自定义存取行为</span></div><div class="line">  get prop() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'getter'</span>;</div><div class="line">  &#125;</div><div class="line">  set prop(value) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'setter: '</span>+value);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//实例方法</span></div><div class="line">  toString() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//静态方法</span></div><div class="line">  <span class="keyword">static</span> classMethod() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'hello'</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//静态属性</span></div><div class="line">  <span class="keyword">static</span> get HuaChen()&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'jelly'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>使用 <code>extend</code> 关键字实现类的继承</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(x, y, color) &#123;</div><div class="line">    <span class="keyword">super</span>(x, y); <span class="comment">// 调用父类的constructor(x, y), super必须调用</span></div><div class="line">    <span class="keyword">this</span>.color = color;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toString() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.color + <span class="string">' '</span> + <span class="keyword">super</span>.toString(); <span class="comment">// 调用父类的toString()</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong><code>import</code> 模块引入的方式</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> name <span class="keyword">from</span> <span class="string">"module-name"</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> name <span class="keyword">from</span> <span class="string">"module-name"</span></div><div class="line"><span class="keyword">import</span> &#123; member &#125; <span class="keyword">from</span> <span class="string">"module-name"</span></div><div class="line"><span class="keyword">import</span> &#123; member <span class="keyword">as</span> alias &#125; <span class="keyword">from</span> <span class="string">"module-name"</span></div><div class="line"><span class="keyword">import</span> &#123; member1 , member2 &#125; <span class="keyword">from</span> <span class="string">"module-name"</span></div><div class="line"><span class="keyword">import</span> &#123; member1 , member2 <span class="keyword">as</span> alias2 , [...] &#125; <span class="keyword">from</span> <span class="string">"module-name"</span></div><div class="line"><span class="keyword">import</span> defaultMember, &#123; member [ , [...] ] &#125; <span class="keyword">from</span> <span class="string">"module-name"</span></div><div class="line"><span class="keyword">import</span> defaultMember, * <span class="keyword">as</span> alias <span class="keyword">from</span> <span class="string">"module-name"</span></div><div class="line"><span class="keyword">import</span> defaultMember <span class="keyword">from</span> <span class="string">"module-name"</span></div><div class="line"><span class="keyword">import</span> <span class="string">"module-name"</span></div></pre></td></tr></table></figure>
<p><strong><code>export</code> 模块导出或对外提供接口的方式</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> firstName = <span class="string">'Michael'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> lastName = <span class="string">'Jackson'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> year = <span class="number">1958</span>;</div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="keyword">var</span> firstName = <span class="string">'Michael'</span>;</div><div class="line"><span class="keyword">var</span> lastName = <span class="string">'Jackson'</span>;</div><div class="line"><span class="keyword">var</span> year = <span class="number">1958</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123;firstName, lastName, year&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 有defautl 与 无default</span></div><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">crc32</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 输入</span></div><div class="line"><span class="keyword">import</span> crc32 <span class="keyword">from</span> <span class="string">'crc32'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">crc32</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">// 输入</span></div><div class="line"><span class="keyword">import</span> &#123;crc32&#125; <span class="keyword">from</span> <span class="string">'crc32'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 设置别名</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> x * y;</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> &#123;add <span class="keyword">as</span> <span class="keyword">default</span>&#125;;</div></pre></td></tr></table></figure>
<p><strong><code>export default</code>命令其实只是输出一个叫做 <code>default</code> 的变量，所以它后面不能跟变量声明语句。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 正确</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">// 正确</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> a;</div><div class="line"></div><div class="line"><span class="comment">// 错误</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">var</span> a = <span class="number">1</span>;</div></pre></td></tr></table></figure>
<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>Promise 为异步编程提供统一的解决方案，比传统的回调和事件更加合理有效。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 1. 多个异步任务同时执行用 Promise.all，顺序执行使用链式调用</span></div><div class="line"><span class="comment">// Promise.all</span></div><div class="line"><span class="built_in">Promise</span></div><div class="line">  .all([jsBuildPromise, cssBuildPromise])</div><div class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    ...</div><div class="line">  &#125;);</div><div class="line"></div><div class="line"><span class="comment">// 2. Promise 的链式调用需要每一个过程返回一个 Promise 对象才能保证顺序执行</span></div><div class="line">gitPromise</div><div class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> git.add())  <span class="comment">// 正确，箭头函数简写</span></div><div class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    git.commit(); <span class="comment">// 错误，函数返回 undefined，会立即执行下一过程</span></div><div class="line">  &#125;)</div><div class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> git.log(); <span class="comment">// 正确</span></div><div class="line">  &#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 3. Promise 需要调用 catch 方法来捕获错误，而且过程内的错误不会阻塞后续代码执行</span></div><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  f;  <span class="comment">// not define error !</span></div><div class="line">&#125;)</div><div class="line">.catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(err)  <span class="comment">// show 'f is not define'</span></div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'error test'</span>);  <span class="comment">// 此行可以被正常执行</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xi480.com1.z0.glb.clouddn.com/1-131209160307.jpg?imageView2/1/w/720/h/400&quot; alt=&quot;&quot;&gt;&lt;br&gt;这里列出在项目中常用的ES6相关特性，以便更快的理解和应用ES6。&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="http://www.qiakr.com/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="js" scheme="http://www.qiakr.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>基于 koa + gulp 的前端工程构建工具</title>
    <link href="http://www.qiakr.com/2016/09/01/velocity-koa-gulp/"/>
    <id>http://www.qiakr.com/2016/09/01/velocity-koa-gulp/</id>
    <published>2016-09-01T02:57:50.000Z</published>
    <updated>2016-09-01T03:40:55.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xi480.com1.z0.glb.clouddn.com/adaf2edda3cc7cd93681bf913901213fb90e91ce.jpg?imageView2/1/w/720/h/400" alt=""></p>
<p>该工具用于移动端和微商城相关H5页面，用于搭建简易的前端web服务，mock服务，优化velocity页面中嵌入的css与js，并提供实时编辑预览功能。<br><a id="more"></a></p>
<h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul>
<li>使用velocity模板的H5多页项目</li>
<li>还没有实现组件化，css与js是嵌入在页面中的活动页面或简单页面</li>
</ul>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>对于现有的Java项目目录结构没有侵入性</li>
<li>通过node版的velocity模板引擎生成独立的前端web服务</li>
<li>对多页面中内嵌的css与js进行优化</li>
<li>自动生成对应的css雪碧图</li>
<li>使用mock服务模拟数据请求</li>
<li>基于livereload的实时刷新预览</li>
<li>监听文件变动，自动构建新的版</li>
</ul>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>此项目主要针对移动端多页面的优化，项目中的H5页面，特点是引用一个公共的css，js引用cdn上的公共js，而与页面相关的css与js直接嵌入在页面中（减少请求数量）</p>
<p>在没有打包构建工具的情况下</p>
<ul>
<li>css3相关新特性需要手动添加各版本和浏览器前缀</li>
<li>雪碧图、base64图片需要手动生成，然后再应用到css</li>
<li>css并没有做相关优化压缩处理</li>
<li>js没有做语法检查和优化压缩</li>
<li>使用velocity模板强依赖后端java环境</li>
<li>不能实时编辑 实时预览</li>
</ul>
<h2 id="构建流程"><a href="#构建流程" class="headerlink" title="构建流程"></a>构建流程</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul>
<li>读取xx.vm页面</li>
<li>提取内嵌的CSS、JS</li>
<li>合并css、js，去掉多余的标签，只保留最后一个</li>
<li>根据css提取雪碧图，压缩雪碧图，生成base64图片，生成新的css，重新嵌入到xx.vm中</li>
</ul>
<p><img src="http://7xi480.com1.z0.glb.clouddn.com/%E6%88%AA%E5%9B%BE%202016-09-01%2008%E6%97%B628%E5%88%8634%E7%A7%92.jpg" alt=""></p>
<h3 id="处理css、js"><a href="#处理css、js" class="headerlink" title="处理css、js"></a>处理css、js</h3><p><img src="http://7xi480.com1.z0.glb.clouddn.com/%E6%88%AA%E5%9B%BE%202016-09-01%2008%E6%97%B629%E5%88%8623%E7%A7%92.jpg" width="400px"></p>
<h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><ul>
<li>替换xx.vm中的css、js</li>
<li>压缩xx.vm</li>
<li>发布到相关目录</li>
<li>启动livereload监听服务</li>
</ul>
<p><img src="http://7xi480.com1.z0.glb.clouddn.com/%E6%88%AA%E5%9B%BE%202016-09-01%2008%E6%97%B629%E5%88%8639%E7%A7%92.jpg" width="400px"></p>
<h3 id="gulp-任务列表"><a href="#gulp-任务列表" class="headerlink" title="gulp 任务列表"></a>gulp 任务列表</h3><p><img src="http://7xi480.com1.z0.glb.clouddn.com/%E6%88%AA%E5%9B%BE%202016-09-01%2008%E6%97%B630%E5%88%8604%E7%A7%92.jpg" width="400px"></p>
<h2 id="需要注意的问题"><a href="#需要注意的问题" class="headerlink" title="需要注意的问题"></a>需要注意的问题</h2><p>在build:init之后，调用生成雪碧图的插件生成的css不一定适用，通常背景图片在使用REM做定位时，不同的屏幕宽度下，图片会错位，所以应将背景图定位改成父类相对定位，添加伪类绝对定位，并放大10倍或100倍，然后再使用css3缩放属性缩小相应的倍数，以提高背景图定位的精确度。<br>具体参考：<a href="http://www.html-js.com/article/JavaScript-learning-notes%203234" target="_blank" rel="external">移动端web app自适应布局探索与总结</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xi480.com1.z0.glb.clouddn.com/adaf2edda3cc7cd93681bf913901213fb90e91ce.jpg?imageView2/1/w/720/h/400&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;该工具用于移动端和微商城相关H5页面，用于搭建简易的前端web服务，mock服务，优化velocity页面中嵌入的css与js，并提供实时编辑预览功能。&lt;br&gt;
    
    </summary>
    
      <category term="web开发" scheme="http://www.qiakr.com/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>CSS实现垂直水平居中</title>
    <link href="http://www.qiakr.com/2016/08/21/css-center/"/>
    <id>http://www.qiakr.com/2016/08/21/css-center/</id>
    <published>2016-08-21T03:20:51.000Z</published>
    <updated>2016-09-01T03:35:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xi480.com1.z0.glb.clouddn.com/0ff41bd5ad6eddc4016b042d3bdbb6fd53663353.jpg?imageView2/1/w/720/h/400" alt=""></p>
<p>水平垂直居中显示，这种展示用CSS来实现又是比较棘手的一件事，但有各种hack的方式可以实现，各有优缺点，兼容性也各有不同，这里举例几种常见的实现方式。<br><a id="more"></a></p>
<h3 id="1、绝对定位居中（子元素需设置宽高）"><a href="#1、绝对定位居中（子元素需设置宽高）" class="headerlink" title="1、绝对定位居中（子元素需设置宽高）"></a>1、绝对定位居中（子元素需设置宽高）</h3><p>内容块的父容器：position:relative;<br>子元素：position: absolute;top: 0;left: 0;bottom: 0;right: 0;margin:auto; （必须设置高度）</p>
<blockquote>
<p>原理：元素在过度受限情况下，将margin设置为auto，浏览器会重算margin的值，过度受限指的是同时设置top/bottom与height或者left/right与width。</p>
</blockquote>
<h3 id="2、绝对定位配合margin（子元素需设置宽高）"><a href="#2、绝对定位配合margin（子元素需设置宽高）" class="headerlink" title="2、绝对定位配合margin（子元素需设置宽高）"></a>2、绝对定位配合margin（子元素需设置宽高）</h3><blockquote>
<p>原理：top：50%元素上边界位于包含框中点，设置负外边界使得元素垂直中心与包含框中心重合；</p>
</blockquote>
<p>第一种</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">       .one&#123;</div><div class="line">           border: 1px solid red;</div><div class="line">           width: 200px;height: 200px;</div><div class="line">           position: relative;</div><div class="line">       &#125;</div><div class="line">       .two&#123;</div><div class="line">           background: red;</div><div class="line">           width: 100px;height: 100px</div><div class="line">           position: absolute;left: 50%;top:50%;</div><div class="line">           margin: -50px 0 0 -50px;          </div><div class="line">          （margin设置百分比是相当于自身的高度与宽度）</div><div class="line">       &#125;</div><div class="line">   <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>第二种</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">    .one&#123;</div><div class="line">        border: 1px solid red;</div><div class="line">        width: 300px;height: 300px;</div><div class="line">        position: relative;</div><div class="line">    &#125;</div><div class="line">    .two&#123;</div><div class="line">        position:absolute;</div><div class="line">        top:50%;</div><div class="line">        left:0;</div><div class="line">        right:0;</div><div class="line">        margin:auto;</div><div class="line">        margin-top:-100px;</div><div class="line">        （margin设置百分比是相当于自身的高度与宽度）</div><div class="line">        width:200px;</div><div class="line">        height:200px;</div><div class="line">        background: red;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="3、table-cell方式（子元素不需设置宽高）"><a href="#3、table-cell方式（子元素不需设置宽高）" class="headerlink" title="3、table-cell方式（子元素不需设置宽高）"></a>3、table-cell方式（子元素不需设置宽高）</h3><p>父容器：display:table-cell;text-align:center;vertical-align:middle;（设置宽高）<br>子元素：display:inline-block;vertical-align:middle;</p>
<blockquote>
<p>原理：利用表格布局的特点，vertical-align设置为middle;单元格中的内容与所在行中间对齐</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">    .one&#123;</div><div class="line">        border: 1px solid red;</div><div class="line">        width: 200px;height: 200px;</div><div class="line">        display:table-cell;vertical-align:middle;text-align: center;</div><div class="line">    &#125;</div><div class="line">    .two&#123;</div><div class="line">        background: red;</div><div class="line">        (1)display:inline-block;(用此方法向上偏差2px)</div><div class="line">        (2)margin:auto（垂直水平居中）</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span>11111111111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="4、通过添加空span标签使图片居中（子元素需设置宽高）"><a href="#4、通过添加空span标签使图片居中（子元素需设置宽高）" class="headerlink" title="4、通过添加空span标签使图片居中（子元素需设置宽高）"></a>4、通过添加空span标签使图片居中（子元素需设置宽高）</h3><p>父容器：text-align: center;</p>
<blockquote>
<p><code>&lt;span&gt;</code><br>display: inline-block;   将行内元素改变为行内块元素显示<br>width: 1px;              实现ＩＥ下可读效果<br>height: 100%;            使用元素高度和图片容器高度一样<br>vertical-align: middle;  垂直对齐<br>图片：vertical-align: middle;   </p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">    .one&#123;</div><div class="line">        border: 1px solid red;</div><div class="line">        width: 200px;height: 200px;</div><div class="line">        text-align: center;</div><div class="line">    &#125;</div><div class="line">    span&#123;</div><div class="line">        display: inline-block;</div><div class="line">        width: 1px;</div><div class="line">        height: 100%;</div><div class="line">        vertical-align: middle;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../img/jian.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="5、外边距margin取负数，大小为width-height（不使用box-sizing-border-box时包括padding，）的一半，再加上top-50-left-50-（子元素需设置宽高）。"><a href="#5、外边距margin取负数，大小为width-height（不使用box-sizing-border-box时包括padding，）的一半，再加上top-50-left-50-（子元素需设置宽高）。" class="headerlink" title="5、外边距margin取负数，大小为width/height（不使用box-sizing: border-box时包括padding，）的一半，再加上top: 50%; left: 50%;（子元素需设置宽高）。"></a>5、外边距margin取负数，大小为width/height（不使用box-sizing: border-box时包括padding，）的一半，再加上top: 50%; left: 50%;（子元素需设置宽高）。</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">    .one&#123;</div><div class="line">        border: 1px solid red;</div><div class="line">        width: 200px;height: 200px;</div><div class="line">        position: relative;</div><div class="line">    &#125;</div><div class="line">    .two&#123;</div><div class="line">        background: red;</div><div class="line">        width: 30px;</div><div class="line">        height: 20px;</div><div class="line">        padding: 20px;</div><div class="line">        position: absolute;</div><div class="line">        top: 50%; left: 50%;</div><div class="line">        margin-left: -35px; /* (width + padding)/2 */</div><div class="line">        margin-top: -30px; /* (height + padding)/2 */</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="6、内容定义transform-translate-50-50-并且加上top：50-；left：50-。（子元素需设置宽高）"><a href="#6、内容定义transform-translate-50-50-并且加上top：50-；left：50-。（子元素需设置宽高）" class="headerlink" title="6、内容定义transform:translate(-50%,-50%),并且加上top：50%；left：50%。（子元素需设置宽高）"></a>6、内容定义transform:translate(-50%,-50%),并且加上top：50%；left：50%。（子元素需设置宽高）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">    .one&#123;</div><div class="line">        border: 1px solid red;</div><div class="line">        width: 200px;height: 200px;</div><div class="line">        position: relative;</div><div class="line">    &#125;</div><div class="line">    .two&#123;</div><div class="line">        background: red;</div><div class="line">        width: 50%;</div><div class="line">        height: 30%;</div><div class="line">        margin: auto;</div><div class="line">        position: absolute;</div><div class="line">        top: 50%; left: 50%;</div><div class="line">        -webkit-transform: translate(-50%,-50%);</div><div class="line">        -ms-transform: translate(-50%,-50%);</div><div class="line">        transform: translate(-50%,-50%);</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="7、增加额外子元素设置margin-bottom为内容元素的高度-padding的一半。（不能实现水平垂直居中，仅垂直居中）"><a href="#7、增加额外子元素设置margin-bottom为内容元素的高度-padding的一半。（不能实现水平垂直居中，仅垂直居中）" class="headerlink" title="7、增加额外子元素设置margin-bottom为内容元素的高度+padding的一半。（不能实现水平垂直居中，仅垂直居中）"></a>7、增加额外子元素设置margin-bottom为内容元素的高度+padding的一半。（不能实现水平垂直居中，仅垂直居中）</h3><blockquote>
<p>原理与2方法类似，floater的下边界是包含框的中心线，负下外边界保证center的中心线与包含框中心线重合</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">    .one&#123;</div><div class="line">        border: 1px solid red;</div><div class="line">        width: 200px;height: 200px;</div><div class="line">    &#125;</div><div class="line">    .floater&#123;</div><div class="line">        float: left;</div><div class="line">        height: 50%;</div><div class="line">        width: 100%;</div><div class="line">        margin-bottom: -10%;</div><div class="line">    &#125;</div><div class="line">    .two&#123;</div><div class="line">        clear: both;</div><div class="line">        height: 20%;</div><div class="line">        background: red;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"floater"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="8、inline-block方式（子元素不需设置宽高）"><a href="#8、inline-block方式（子元素不需设置宽高）" class="headerlink" title="8、inline-block方式（子元素不需设置宽高）"></a>8、inline-block方式（子元素不需设置宽高）</h3><blockquote>
<p>原理：为同一行的inline-block元素设置vertical-align：middle，该行内的inline-block元素会按照元素的垂直中心线对齐。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">    .one&#123;</div><div class="line">        border: 1px solid red;</div><div class="line">        width: 300px;height: 300px;</div><div class="line">        text-align: center;</div><div class="line">    &#125;</div><div class="line">    .one:after&#123;</div><div class="line">        content: '';</div><div class="line">        display: inline-block;</div><div class="line">        vertical-align: middle;</div><div class="line">        height: 100%;</div><div class="line">    &#125;</div><div class="line">    .two&#123;</div><div class="line">        background: red;</div><div class="line">        display:inline-block;</div><div class="line">        vertical-align:middle;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span>11111111111111111111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="9、弹性盒式布局（子元素不需设置宽高）"><a href="#9、弹性盒式布局（子元素不需设置宽高）" class="headerlink" title="9、弹性盒式布局（子元素不需设置宽高）"></a>9、弹性盒式布局（子元素不需设置宽高）</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes#.E5.BC.B9.E6.80.A7.E7.9B.92.E6.A6.82.E5.BF.B5" target="_blank" rel="external">CSS弹性盒</a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">   (1) .one&#123;</div><div class="line">           border: 1px solid red;</div><div class="line">           width: 300px;height: 300px;</div><div class="line">           display: flex;</div><div class="line">           align-items: center;</div><div class="line">           justify-content: center;</div><div class="line">       &#125;</div><div class="line">       .two&#123;</div><div class="line">           background: red;</div><div class="line">       &#125;</div><div class="line">   (2) .one&#123;</div><div class="line">           border: 1px solid red;</div><div class="line">           width: 300px;height: 300px;</div><div class="line">           display: flex;</div><div class="line">       &#125;</div><div class="line">       .two&#123;</div><div class="line">           background: red;</div><div class="line">           margin:auto;</div><div class="line">       &#125;</div><div class="line">   <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span>111111111111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xi480.com1.z0.glb.clouddn.com/0ff41bd5ad6eddc4016b042d3bdbb6fd53663353.jpg?imageView2/1/w/720/h/400&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;水平垂直居中显示，这种展示用CSS来实现又是比较棘手的一件事，但有各种hack的方式可以实现，各有优缺点，兼容性也各有不同，这里举例几种常见的实现方式。&lt;br&gt;
    
    </summary>
    
      <category term="web开发" scheme="http://www.qiakr.com/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>CSS工具类使用说明</title>
    <link href="http://www.qiakr.com/2016/07/21/tool-css/"/>
    <id>http://www.qiakr.com/2016/07/21/tool-css/</id>
    <published>2016-07-21T12:09:58.000Z</published>
    <updated>2016-07-21T12:11:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xi480.com1.z0.glb.clouddn.com/blog-31674132_16.jpg?imageView2/1/w/720/h/400" alt=""></p>
<p>旨在现在的CSS框架下去快速修正个别样式，减少添加CSS的工作量，但不可滥用工具类，如列表项的样式较多里，并不实用，常用于容器类型的标签，建议样式在三个左右时，使用工具类组合，四个以上时，添加独立的class<br><a id="more"></a></p>
<h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p>百分比、字体大小、行高、字体风格、字体类型、外边距、内边距、块级显示、边框、颜色、背景颜色、浮动、定位、overflow、对齐、可见性、分隔线、文本溢出、动画</p>
<h3 id="百分比"><a href="#百分比" class="headerlink" title="百分比"></a>百分比</h3><p>定义了常用的百分比 10 - 100，步进值10，加两个特殊百分比 25%、33.3%，分别对应四等分与三等分</p>
<h3 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h3><p>定义了大小为0、10、12、13、14、16、18几种常用字体大小</p>
<p>字体大小设置为0，通常可以用于去掉inline-block后产生的间隔，或可以用于隐藏文字、去掉img元素在容器中的间隔</p>
<h3 id="行高"><a href="#行高" class="headerlink" title="行高"></a>行高</h3><p>定义了24、28、30常用行高</p>
<h3 id="字体风格"><a href="#字体风格" class="headerlink" title="字体风格"></a>字体风格</h3><p>定义了 普通、加粗、斜体、中划线 常用样式</p>
<h3 id="字体类型"><a href="#字体类型" class="headerlink" title="字体类型"></a>字体类型</h3><p>定义了 <code>Arial</code> 字体，用于数字</p>
<h3 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h3><p>定义了 0-30 的 <code>margin</code>，5-30的 <code>margin-top/margin-right/margin-bottom</code>, 步进值为5</p>
<h3 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h3><p>定义了 0-30 的 <code>padding</code>，5-30的 <code>padding-top/padding-right/padding-bottom</code>, 步进值为5</p>
<h3 id="块级显示"><a href="#块级显示" class="headerlink" title="块级显示"></a>块级显示</h3><p>定义了几个显示方式 隐藏、行内、块级、行内块级</p>
<h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><p>定义了1px的全边框，上、下、左、右边框的样式</p>
<h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><p>定义了常用安全色<code>#333</code>、<code>#999</code>、<code>#666</code>、<code>#888</code>、常用颜色红、蓝、绿、橙、白的样式</p>
<h3 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h3><p>定义了两中背景色 白色 与 灰色</p>
<h3 id="浮动定位"><a href="#浮动定位" class="headerlink" title="浮动定位"></a>浮动定位</h3><p>定义了 左浮动 <code>l</code>, 右浮动 <code>r</code></p>
<h3 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h3><p>定义的 <code>overflow</code> 的 <code>hidden/auto</code> 两种的样式</p>
<h3 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h3><p>定义了6中文本对齐方式，水平左中右，垂直上中下几中对齐</p>
<h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p>定义了 <code>visibility</code> 的 <code>hidden/visible</code> 两种样式</p>
<h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><p>定义了水平和垂直分隔线，便需要配合margin和背景颜色来使用</p>
<h3 id="文本溢出"><a href="#文本溢出" class="headerlink" title="文本溢出"></a>文本溢出</h3><p>定义了文本超出以<code>...</code>显示的工具类，需要配合max-width来使用</p>
<h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><p>定义了常用动画过渡处理的样式</p>
<p>用法示例</p>
<iframe height="300" scrolling="no" src="//codepen.io/togglelt/embed/WxrBzd/?height=300&theme-id=13299&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/togglelt/pen/WxrBzd/" target="_blank" rel="external">Tool.css</a> by LT (<a href="http://codepen.io/togglelt" target="_blank" rel="external">@togglelt</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>


<p>源码</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*!</span></div><div class="line">* author: LT</div><div class="line">* version: v0.0.1</div><div class="line">* github: https://github.com/git-lt/Tool.css/blob/master/Tool.css</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="comment">/* percent width value */</span></div><div class="line">	<span class="selector-class">.pct10</span>&#123;<span class="attribute">width</span>:<span class="number">10%</span>;&#125; <span class="selector-class">.pct20</span>&#123;<span class="attribute">width</span>:<span class="number">20%</span>;&#125; <span class="selector-class">.pct25</span>&#123;<span class="attribute">width</span>:<span class="number">25%</span>;&#125; <span class="selector-class">.pct30</span>&#123;<span class="attribute">width</span>:<span class="number">30%</span>;&#125; <span class="selector-class">.pct33</span>&#123;<span class="attribute">width</span>:<span class="number">33.3%</span>;&#125; <span class="selector-class">.pct40</span>&#123;<span class="attribute">width</span>:<span class="number">40%</span>;&#125; <span class="selector-class">.pct50</span>&#123;<span class="attribute">width</span>:<span class="number">50%</span>;&#125; <span class="selector-class">.pct60</span>&#123;<span class="attribute">width</span>:<span class="number">60%</span>;&#125; <span class="selector-class">.pct70</span>&#123;<span class="attribute">width</span>:<span class="number">70%</span>;&#125; <span class="selector-class">.pct80</span>&#123;<span class="attribute">width</span>:<span class="number">80%</span>;&#125; <span class="selector-class">.pct90</span>&#123;<span class="attribute">width</span>:<span class="number">90%</span>;&#125; <span class="selector-class">.pct100</span>&#123;<span class="attribute">width</span>:<span class="number">100%</span>;&#125;</div><div class="line"></div><div class="line"><span class="comment">/* font-size */</span></div><div class="line">	<span class="selector-class">.f0</span>&#123;<span class="attribute">font-size</span>:<span class="number">0</span>;&#125; <span class="selector-class">.f10</span>&#123;<span class="attribute">font-size</span>:<span class="number">10px</span>;&#125; <span class="selector-class">.f12</span>&#123;<span class="attribute">font-size</span>:<span class="number">12px</span>;&#125; <span class="selector-class">.f13</span>&#123;<span class="attribute">font-size</span>:<span class="number">13px</span>;&#125; <span class="selector-class">.f14</span>&#123;<span class="attribute">font-size</span>:<span class="number">14px</span>;&#125; <span class="selector-class">.f16</span>&#123;<span class="attribute">font-size</span>:<span class="number">16px</span>;&#125; <span class="selector-class">.f18</span>&#123;<span class="attribute">font-size</span>:<span class="number">18px</span>;&#125; </div><div class="line"></div><div class="line"><span class="comment">/*line-height*/</span></div><div class="line">	<span class="selector-class">.lh24</span> &#123; <span class="attribute">line-height</span>: <span class="number">24px</span>;&#125; <span class="selector-class">.lh28</span> &#123; <span class="attribute">line-height</span>: <span class="number">28px</span>;&#125; <span class="selector-class">.lh30</span> &#123; <span class="attribute">line-height</span>: <span class="number">30px</span>;&#125;</div><div class="line"></div><div class="line"><span class="comment">/* font-style */</span></div><div class="line">	<span class="selector-class">.n</span>&#123;<span class="attribute">font-weight</span>:<span class="number">400</span>; <span class="attribute">font-style</span>:normal; <span class="attribute">white-space</span>: normal;&#125; <span class="selector-class">.b</span>&#123;<span class="attribute">font-weight</span>:bold;&#125;<span class="selector-class">.i</span>&#123;<span class="attribute">font-style</span>:italic;&#125;<span class="selector-class">.del</span> &#123;<span class="attribute">text-decoration</span>: line-through;&#125;</div><div class="line"></div><div class="line"><span class="comment">/* font-family */</span></div><div class="line">	<span class="selector-class">.fa</span>&#123;<span class="attribute">font-family</span>:Arial;&#125;</div><div class="line"></div><div class="line"><span class="comment">/* margin */</span></div><div class="line">	<span class="selector-class">.m0</span>  &#123;<span class="attribute">margin</span>:<span class="number">0px</span>;&#125; <span class="selector-class">.m5</span> &#123;<span class="attribute">margin</span>:<span class="number">5px</span>;&#125; <span class="selector-class">.m10</span> &#123;<span class="attribute">margin</span>:<span class="number">10px</span>;&#125; <span class="selector-class">.m15</span> &#123;<span class="attribute">margin</span>:<span class="number">15px</span>;&#125; <span class="selector-class">.m20</span> &#123;<span class="attribute">margin</span>:<span class="number">20px</span>;&#125; <span class="selector-class">.m25</span> &#123;<span class="attribute">margin</span>:<span class="number">25px</span>;&#125; <span class="selector-class">.m30</span> &#123;<span class="attribute">margin</span>:<span class="number">30px</span>;&#125;</div><div class="line">	<span class="selector-class">.mt5</span> &#123;<span class="attribute">margin-top</span>:<span class="number">5px</span>;&#125; <span class="selector-class">.mt10</span> &#123;<span class="attribute">margin-top</span>: <span class="number">10px</span>;&#125; <span class="selector-class">.mt15</span> &#123;<span class="attribute">margin-top</span>: <span class="number">10px</span>;&#125; <span class="selector-class">.mt20</span> &#123;<span class="attribute">margin-top</span>: <span class="number">20px</span>;&#125; <span class="selector-class">.mt25</span> &#123;<span class="attribute">margin-top</span>: <span class="number">20px</span>;&#125; <span class="selector-class">.mt30</span> &#123;<span class="attribute">margin-top</span>: <span class="number">30px</span>;&#125;</div><div class="line">	<span class="selector-class">.ml5</span> &#123;<span class="attribute">margin-left</span>:<span class="number">5px</span>;&#125; <span class="selector-class">.ml10</span> &#123;<span class="attribute">margin-left</span>:<span class="number">10px</span>;&#125; <span class="selector-class">.ml15</span> &#123;<span class="attribute">margin-left</span>:<span class="number">15px</span>;&#125; <span class="selector-class">.ml20</span> &#123;<span class="attribute">margin-left</span>:<span class="number">20px</span>;&#125; <span class="selector-class">.ml25</span> &#123;<span class="attribute">margin-left</span>:<span class="number">20px</span>;&#125; <span class="selector-class">.ml30</span> &#123;<span class="attribute">margin-left</span>:<span class="number">30px</span>;&#125;</div><div class="line">	<span class="selector-class">.mb5</span> &#123;<span class="attribute">margin-bottom</span>:<span class="number">5px</span>;&#125; <span class="selector-class">.mb10</span> &#123;<span class="attribute">margin-bottom</span>:<span class="number">10px</span>;&#125; <span class="selector-class">.mb15</span> &#123;<span class="attribute">margin-bottom</span>:<span class="number">10px</span>;&#125; <span class="selector-class">.mb20</span> &#123;<span class="attribute">margin-bottom</span>:<span class="number">20px</span>;&#125; <span class="selector-class">.mb25</span> &#123;<span class="attribute">margin-bottom</span>:<span class="number">20px</span>;&#125; <span class="selector-class">.mb30</span> &#123;<span class="attribute">margin-bottom</span>:<span class="number">30px</span>;&#125;</div><div class="line">	<span class="selector-class">.mr5</span> &#123;<span class="attribute">margin-right</span>:<span class="number">5px</span>;&#125; <span class="selector-class">.mr10</span> &#123;<span class="attribute">margin-right</span>:<span class="number">10px</span>;&#125; <span class="selector-class">.mr15</span> &#123;<span class="attribute">margin-right</span>:<span class="number">15px</span>;&#125; <span class="selector-class">.mr20</span> &#123;<span class="attribute">margin-right</span>:<span class="number">20px</span>;&#125; <span class="selector-class">.mr25</span> &#123;<span class="attribute">margin-right</span>:<span class="number">25px</span>;&#125; <span class="selector-class">.mr30</span> &#123;<span class="attribute">margin-right</span>:<span class="number">30px</span>;&#125;</div><div class="line"></div><div class="line"><span class="comment">/* padding */</span></div><div class="line">	<span class="selector-class">.p0</span>  &#123;<span class="attribute">padding</span>:<span class="number">0px</span>;&#125; <span class="selector-class">.p5</span> &#123;<span class="attribute">padding</span>:<span class="number">5px</span>;&#125; <span class="selector-class">.p10</span> &#123;<span class="attribute">padding</span>:<span class="number">10px</span>;&#125; <span class="selector-class">.p15</span> &#123;<span class="attribute">padding</span>:<span class="number">15px</span>;&#125; <span class="selector-class">.p20</span> &#123;<span class="attribute">padding</span>:<span class="number">20px</span>;&#125; <span class="selector-class">.p25</span> &#123;<span class="attribute">padding</span>:<span class="number">25px</span>;&#125; <span class="selector-class">.p30</span> &#123;<span class="attribute">padding</span>:<span class="number">30px</span>;&#125;</div><div class="line">	<span class="selector-class">.pt5</span> &#123;<span class="attribute">padding-top</span>: <span class="number">5px</span>;&#125; <span class="selector-class">.pt10</span> &#123;<span class="attribute">padding-top</span>: <span class="number">10px</span>;&#125; <span class="selector-class">.pt15</span> &#123;<span class="attribute">padding-top</span>: <span class="number">15px</span>;&#125; <span class="selector-class">.pt20</span> &#123;<span class="attribute">padding-top</span>: <span class="number">20px</span>;&#125; <span class="selector-class">.pt25</span> &#123;<span class="attribute">padding-top</span>: <span class="number">25px</span>;&#125; <span class="selector-class">.pt30</span> &#123;<span class="attribute">padding-top</span>: <span class="number">30px</span>;&#125;</div><div class="line">	<span class="selector-class">.pl5</span> &#123;<span class="attribute">padding-left</span>: <span class="number">5px</span>;&#125; <span class="selector-class">.pl10</span> &#123;<span class="attribute">padding-left</span>: <span class="number">10px</span>;&#125; <span class="selector-class">.pl15</span> &#123;<span class="attribute">padding-left</span>: <span class="number">15px</span>;&#125; <span class="selector-class">.pl20</span> &#123;<span class="attribute">padding-left</span>: <span class="number">20px</span>;&#125;<span class="selector-class">.pl25</span> &#123;<span class="attribute">padding-left</span>: <span class="number">25px</span>;&#125; <span class="selector-class">.pl30</span> &#123;<span class="attribute">padding-left</span>: <span class="number">30px</span>;&#125;</div><div class="line">	<span class="selector-class">.pb5</span> &#123;<span class="attribute">padding-bottom</span>: <span class="number">5px</span>;&#125; <span class="selector-class">.pb10</span> &#123;<span class="attribute">padding-bottom</span>: <span class="number">10px</span>;&#125; <span class="selector-class">.pb15</span> &#123;<span class="attribute">padding-bottom</span>: <span class="number">15px</span>;&#125; <span class="selector-class">.pb20</span> &#123;<span class="attribute">padding-bottom</span>: <span class="number">20px</span>;&#125; <span class="selector-class">.pb25</span> &#123;<span class="attribute">padding-bottom</span>: <span class="number">25px</span>;&#125; <span class="selector-class">.pb30</span> &#123;<span class="attribute">padding-bottom</span>: <span class="number">30px</span>;&#125;</div><div class="line">	<span class="selector-class">.pr5</span> &#123;<span class="attribute">padding-right</span>: <span class="number">5px</span>;&#125; <span class="selector-class">.pr10</span> &#123;<span class="attribute">padding-right</span>: <span class="number">10px</span>;&#125; <span class="selector-class">.pr15</span> &#123;<span class="attribute">padding-right</span>: <span class="number">15px</span>;&#125; <span class="selector-class">.pr20</span> &#123;<span class="attribute">padding-right</span>: <span class="number">20px</span>;&#125; <span class="selector-class">.pr25</span> &#123;<span class="attribute">padding-right</span>: <span class="number">25px</span>;&#125; <span class="selector-class">.pr30</span> &#123;<span class="attribute">padding-right</span>: <span class="number">30px</span>;&#125;</div><div class="line"></div><div class="line"><span class="comment">/*display*/</span></div><div class="line">	<span class="selector-class">.dn</span>&#123;<span class="attribute">display</span>:none;&#125; <span class="selector-class">.di</span>&#123;<span class="attribute">display</span>:inline;&#125; <span class="selector-class">.db</span>&#123;<span class="attribute">display</span>:block;&#125; <span class="selector-class">.dib</span>&#123;<span class="attribute">display</span>:inline-block;&#125;</div><div class="line"></div><div class="line"><span class="comment">/*border*/</span></div><div class="line">	<span class="selector-class">.bdr</span> &#123;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#f2f2f2</span>;&#125; <span class="selector-class">.bdr-l</span> &#123;<span class="attribute">border-left</span>:<span class="number">1px</span> solid <span class="number">#f2f2f2</span>;&#125; <span class="selector-class">.bdr-r</span> &#123;<span class="attribute">border-right</span>:<span class="number">1px</span> solid <span class="number">#f2f2f2</span>;&#125; <span class="selector-class">.bdr-t</span> &#123;<span class="attribute">border-top</span>:<span class="number">1px</span> solid <span class="number">#f2f2f2</span>;&#125; <span class="selector-class">.bdr-b</span> &#123;<span class="attribute">border-bottom</span>:<span class="number">1px</span> solid <span class="number">#f2f2f2</span>;&#125;</div><div class="line">  </div><div class="line"><span class="comment">/*color*/</span></div><div class="line">	<span class="selector-class">.c-3</span> &#123;<span class="attribute">color</span>:<span class="number">#333</span>;&#125; <span class="selector-class">.c-6</span> &#123;<span class="attribute">color</span>:<span class="number">#666</span>;&#125; <span class="selector-class">.c-8</span> &#123;<span class="attribute">color</span>:<span class="number">#888</span>;&#125; <span class="selector-class">.c-9</span> &#123;<span class="attribute">color</span>:<span class="number">#999</span>;&#125;</div><div class="line">	<span class="selector-class">.c-rd</span> &#123;<span class="attribute">color</span>: <span class="number">#F44336</span>;&#125; <span class="selector-class">.c-bl</span> &#123;<span class="attribute">color</span>: <span class="number">#0894EC</span>;&#125; <span class="selector-class">.c-wt</span> &#123;<span class="attribute">color</span>: <span class="number">#FFFFFF</span>;&#125; <span class="selector-class">.c-gr</span> &#123;<span class="attribute">color</span>: <span class="number">#4CD964</span>;&#125; <span class="selector-class">.c-or</span> &#123;<span class="attribute">color</span>: <span class="number">#FF6600</span>;&#125;</div><div class="line"></div><div class="line"><span class="comment">/*backgroud-color*/</span></div><div class="line">	<span class="selector-class">.bg-wt</span> &#123; <span class="attribute">background-color</span>: <span class="number">#fff</span>; &#125;<span class="selector-class">.bg-f5</span> &#123; <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>; &#125;</div><div class="line"> </div><div class="line"><span class="comment">/*float &amp; position*/</span></div><div class="line">	<span class="selector-class">.l</span> &#123;<span class="attribute">float</span>: left;&#125;<span class="selector-class">.r</span> &#123;<span class="attribute">float</span>: right;&#125;</div><div class="line">	<span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;<span class="attribute">display</span>: table;<span class="attribute">content</span>: <span class="string">" "</span>;&#125;<span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;<span class="attribute">clear</span>: both;&#125;</div><div class="line">	<span class="selector-class">.rel</span> &#123;<span class="attribute">position</span>: relative;&#125;<span class="selector-class">.abs</span> &#123;<span class="attribute">position</span>: absolute;&#125;</div><div class="line"></div><div class="line"><span class="comment">/* align */</span></div><div class="line">	<span class="selector-class">.vt</span> &#123;<span class="attribute">vertical-align</span>: top;&#125;<span class="selector-class">.vb</span> &#123;<span class="attribute">vertical-align</span>: bottom;&#125;<span class="selector-class">.vm</span> &#123;<span class="attribute">vertical-align</span>: middle;&#125;</div><div class="line">	<span class="selector-class">.tc</span> &#123;<span class="attribute">text-align</span>: center;&#125; <span class="selector-class">.tl</span> &#123;<span class="attribute">text-align</span>: left;&#125; <span class="selector-class">.tr</span> &#123;<span class="attribute">text-align</span>: right;&#125;</div><div class="line"></div><div class="line"><span class="comment">/* overflow */</span></div><div class="line">	<span class="selector-class">.ovh</span>&#123;<span class="attribute">overflow</span>:hidden;&#125; <span class="selector-class">.ova</span>&#123;<span class="attribute">overflow</span>:auto;&#125;</div><div class="line"></div><div class="line"><span class="comment">/* visibility */</span></div><div class="line">	<span class="selector-class">.vh</span>&#123;<span class="attribute">visibility</span>:hidden;&#125;<span class="selector-class">.vv</span>&#123;<span class="attribute">visibility</span>:visible;&#125;</div><div class="line"></div><div class="line"><span class="comment">/*hide scrollbar*/</span></div><div class="line">	<span class="selector-class">.no-scroll</span> &#123;<span class="attribute">overflow</span>: hidden <span class="meta">!important</span>; <span class="attribute">height</span>: <span class="number">100%</span> <span class="meta">!important</span>;&#125;<span class="selector-class">.no-scroll</span> <span class="selector-tag">body</span> &#123;<span class="attribute">overflow</span>: hidden; <span class="attribute">height</span>: <span class="number">100%</span>;&#125;</div><div class="line"></div><div class="line"><span class="comment">/*divider line*/</span></div><div class="line">	<span class="selector-class">.dvd-x</span> &#123;<span class="attribute">display</span>: block;<span class="attribute">font-size</span>: <span class="number">0</span>; <span class="attribute">height</span>: <span class="number">1px</span>; <span class="attribute">clear</span>: both;&#125;</div><div class="line">	<span class="selector-class">.dvd-y</span> &#123;<span class="attribute">display</span>:inline-block; <span class="attribute">font-size</span>: <span class="number">0</span>; <span class="attribute">width</span>: <span class="number">1px</span>;&#125;</div><div class="line"></div><div class="line"><span class="comment">/* ellipsis */</span></div><div class="line">	<span class="selector-class">.ell</span>&#123;<span class="attribute">text-overflow</span>:ellipsis; <span class="attribute">white-space</span>:nowrap; <span class="attribute">overflow</span>:hidden;&#125;</div><div class="line"></div><div class="line"><span class="comment">/*transition*/</span></div><div class="line">	<span class="selector-class">.trans</span>&#123;<span class="attribute">-ms-transition</span>:all <span class="number">0.2s</span>; <span class="attribute">-webkit-transition</span>:all <span class="number">0.2s</span>; <span class="attribute">transition</span>:all <span class="number">0.2s</span>;&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xi480.com1.z0.glb.clouddn.com/blog-31674132_16.jpg?imageView2/1/w/720/h/400&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;旨在现在的CSS框架下去快速修正个别样式，减少添加CSS的工作量，但不可滥用工具类，如列表项的样式较多里，并不实用，常用于容器类型的标签，建议样式在三个左右时，使用工具类组合，四个以上时，添加独立的class&lt;br&gt;
    
    </summary>
    
      <category term="web开发" scheme="http://www.qiakr.com/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>组件编写规范</title>
    <link href="http://www.qiakr.com/2016/07/17/Component-define-guide/"/>
    <id>http://www.qiakr.com/2016/07/17/Component-define-guide/</id>
    <published>2016-07-17T08:03:53.000Z</published>
    <updated>2016-07-17T08:30:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xi480.com1.z0.glb.clouddn.com/HammockCypress_ZH-CN10587366950_1920x1080.jpg?imageView2/1/w/720/h/400" alt=""></p>
<p>组件的封装有利用于代码的复用，封装统一的数据处理逻辑，对外提供接口，灵活配置与扩展，调用方便，利于维护。<br><a id="more"></a></p>
<h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><ul>
<li>开闭原则：对内修改关闭，对外扩展开放</li>
<li>单例模式：同一个组件，在多次调用时，只使用一个单例</li>
</ul>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>使用闭包：减少全局变量的污染，避免与其它插件冲突</p>
<h3 id="严格模式-strict-mode"><a href="#严格模式-strict-mode" class="headerlink" title="严格模式 (strict mode)"></a>严格模式 (strict mode)</h3><p>使用严格模式：添加 <code>use strict</code> 标识</p>
<ul>
<li>消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;</li>
<li>消除代码运行的一些不安全之处，保证代码运行的安全；</li>
<li>提高编译器效率，增加运行速度；</li>
<li>为未来新版本的Javascript做好铺垫。</li>
</ul>
<h3 id="组件说明"><a href="#组件说明" class="headerlink" title="组件说明"></a>组件说明</h3><p>组件应添加组件说明，包含：组件名称、作者、版本、依赖项、使用方式、源码地址</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* module: Button</div><div class="line">* author: XXX</div><div class="line">* version: v0.0.1</div><div class="line">* use age: ....</div><div class="line">* deps: [...]</div><div class="line">* github: ...</div><div class="line">**/</div></pre></td></tr></table></figure>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>组件的状态和属性都应该在构造函数中进行初始化</p>
<h3 id="插件定义"><a href="#插件定义" class="headerlink" title="插件定义"></a>插件定义</h3><p>通用插件定义</p>
<ul>
<li>在内部返回每一个jQuery对象，插件的实例缓存到jQ对象的<code>data</code>中</li>
<li>要的参数的类型调用组件不同的方法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Plugin</span>(<span class="params">option</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>)</div><div class="line">      <span class="keyword">var</span> data  = $<span class="keyword">this</span>.data(<span class="string">'qk.button'</span>)</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (!data) $<span class="keyword">this</span>.data(<span class="string">'qk.button'</span>, (data = <span class="keyword">new</span> Button(<span class="keyword">this</span>)))</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> option == <span class="string">'string'</span>) data[option].call($<span class="keyword">this</span>)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="事件的命名空间"><a href="#事件的命名空间" class="headerlink" title="事件的命名空间"></a>事件的命名空间</h3><p>在开发较复杂的组件时，应添加事件命名空间，方便事件的管理，参见<a href="https://github.com/twbs/bootstrap/blob/master/js%2Fmodal.js" target="_blank" rel="external">bootstrap modal组件</a></p>
<h3 id="对外开放配置"><a href="#对外开放配置" class="headerlink" title="对外开放配置"></a>对外开放配置</h3><p>组件通常有很多的配置，将配置接口对外开放，可方便用户对组件进行详情的配置与自定义</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$.bn.button.defaults=&#123; ... &#125;</div></pre></td></tr></table></figure>
<p><strong> 注意： 组件内部使用到的模板、class、id等都应该放到配置中，以便使用者自定义 </strong></p>
<h3 id="对外开放构造器"><a href="#对外开放构造器" class="headerlink" title="对外开放构造器"></a>对外开放构造器</h3><p>将构造器对外开放，可方便外部对插件进行扩展升级</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$.fn.button.Constructor = Button;</div></pre></td></tr></table></figure>
<h3 id="解决与其它重名插件的冲突"><a href="#解决与其它重名插件的冲突" class="headerlink" title="解决与其它重名插件的冲突"></a>解决与其它重名插件的冲突</h3><p>为防止组件名称与其它组件重名，应对外提供onConflict接口进行重命名。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> old = $.fn.button;</div><div class="line">$.fn.button.noConflict = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;$.fn.button = old;<span class="keyword">return</span> <span class="keyword">this</span>;&#125;</div></pre></td></tr></table></figure>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>组件的生命周期包含：组件状态初始化、数据初始化、事件绑定、更新、销毁</p>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ul>
<li>PUBLIC CLASS DEFINITION：类定义，定义了插件构造方法类及方法。</li>
<li>PLUGIN DEFINITION：插件定义，上面只是定义了插件的类，这里才是实现插件的地方。</li>
<li>PLUGIN NOCONFLICT:插件命名冲突解决</li>
<li>DATA-API：DATA-属性接口</li>
</ul>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* module: Button</div><div class="line">* author: XXX</div><div class="line">* version: v0.0.1</div><div class="line">* use age: ....</div><div class="line">* deps: [...]</div><div class="line">* github: ...</div><div class="line">**/</div><div class="line"></div><div class="line">!<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</div><div class="line"><span class="meta"></span></div><div class="line">  "use strict";</div><div class="line"></div><div class="line">  <span class="comment">// CLASS DEFINITION</span></div><div class="line">  <span class="comment">// ================ </span></div><div class="line">  <span class="keyword">var</span> Button = <span class="function"><span class="keyword">function</span> (<span class="params">element, options</span>) </span>&#123;<span class="comment">/*some code*&#125;</span></div><div class="line">  </div><div class="line">  Button.VERSION='v1.0.1';</div><div class="line">  </div><div class="line">  Button.prototype.setState = function (state) &#123;/*some code*/&#125;</div><div class="line">  Button.prototype.toggle = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">/*some code*/</span>&#125;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">// PLUGIN DEFINITION</span></div><div class="line">  <span class="comment">// =================</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Plugin</span>(<span class="params">option</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>)</div><div class="line">      <span class="keyword">var</span> data  = $<span class="keyword">this</span>.data(<span class="string">'qk.button'</span>)</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (!data) $<span class="keyword">this</span>.data(<span class="string">'qk.button'</span>, (data = <span class="keyword">new</span> Button(<span class="keyword">this</span>)))</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> option == <span class="string">'string'</span>) data[option].call($<span class="keyword">this</span>)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> old = $.fn.button;</div><div class="line"></div><div class="line">  $.fn.button             = Plugin;</div><div class="line">  $.fn.button.Constructor = Button;</div><div class="line">  $.fn.button.defaults = &#123;<span class="attr">loadingText</span>: <span class="string">'loading...'</span>&#125;</div><div class="line">  </div><div class="line">  <span class="comment">// NO CONFLICT</span></div><div class="line">  <span class="comment">// ===========</span></div><div class="line">  $.fn.button.noConflict = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      $.fn.button = old;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// DATA-API</span></div><div class="line">  <span class="comment">// ========</span></div><div class="line">  $(<span class="built_in">document</span>).on(<span class="string">'click.button.data-api'</span>, <span class="string">'[data-toggle^=button]'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;<span class="comment">/*some code*/</span>&#125;)</div><div class="line"></div><div class="line">&#125;(jQuery, <span class="built_in">window</span>, <span class="literal">undefined</span>);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xi480.com1.z0.glb.clouddn.com/HammockCypress_ZH-CN10587366950_1920x1080.jpg?imageView2/1/w/720/h/400&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;组件的封装有利用于代码的复用，封装统一的数据处理逻辑，对外提供接口，灵活配置与扩展，调用方便，利于维护。&lt;br&gt;
    
    </summary>
    
      <category term="web开发" scheme="http://www.qiakr.com/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>模块编写规范</title>
    <link href="http://www.qiakr.com/2016/07/17/AMD-Module-guide/"/>
    <id>http://www.qiakr.com/2016/07/17/AMD-Module-guide/</id>
    <published>2016-07-17T08:03:53.000Z</published>
    <updated>2016-09-01T03:26:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xi480.com1.z0.glb.clouddn.com/1246515077564.jpg?imageView2/1/w/720/h/400" alt=""></p>
<p>React或Vue给我来带来的不是仅仅是View层的改变和便捷的组件化开发，更多的是围绕这套开发体系，整个技术栈的应用和实践。<br>但很多管理系统还是基于传统的AMD或CMD开发，配合Jquery插件使用，所以日常的组件和模块编写应该有一定的规范，以减少多人配合开发的沟通成本，统一编码风格，便于维护管理，也便于后期重构切换到新的技术栈。<br><a id="more"></a></p>
<h2 id="是编写模块还是编写组件？"><a href="#是编写模块还是编写组件？" class="headerlink" title="是编写模块还是编写组件？"></a>是编写模块还是编写组件？</h2><h3 id="模块与组件的区别"><a href="#模块与组件的区别" class="headerlink" title="模块与组件的区别"></a>模块与组件的区别</h3><ul>
<li>组件：可重用，对独立功能生命周期的封装。对外提供统一的配置和调用接口。遵循开闭原则：对外扩展开放，对内修改关闭。</li>
<li>模块：不可重用，对一个业务处理的封装，有独有的业务处理代码，可调用各种组件。</li>
</ul>
<h3 id="依赖jQuery的组件"><a href="#依赖jQuery的组件" class="headerlink" title="依赖jQuery的组件"></a>依赖jQuery的组件</h3><p>挂载为jQuery的静态方法 还是 挂载到jQuery的实例上？</p>
<ul>
<li>挂载到jQuery的实例上: 页面上需要实例化多个功能一样的组件时，依赖页面上的DOM结构，依赖父容器初始化</li>
<li>挂载为jQuery的静态方法: 不依赖页面上的DOM，以处理数据为主</li>
</ul>
<h3 id="独立的组件"><a href="#独立的组件" class="headerlink" title="独立的组件"></a>独立的组件</h3><p>对纯数据层面的处理，比如常用的Utils模块、数据验证、xss模块、加密解密、cookie操作、特性检测等</p>
<h2 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h2><h3 id="由前往后"><a href="#由前往后" class="headerlink" title="由前往后"></a>由前往后</h3><ul>
<li>从前往后推，先构建使用方式和场景</li>
<li>首先应该想到的是组件或模块的使用方法，它有那些方法和属性，应该怎样初始化</li>
<li>需要预留怎么样的配置或接口去做模块的扩展</li>
<li>需要依赖的资源</li>
</ul>
<h3 id="结构和接口设计"><a href="#结构和接口设计" class="headerlink" title="结构和接口设计"></a>结构和接口设计</h3><h4 id="模块全局变量"><a href="#模块全局变量" class="headerlink" title="模块全局变量"></a>模块全局变量</h4><ul>
<li>CONF 模块配置: api地址，公用的配置和常量</li>
<li>pageVM 模块数据模型: 如果页面有大量表单元素，使用avalon的VM模型做数据的双向绑定，如果没有，则不需要此变量</li>
<li>pageView 模块业务逻辑: 页面主逻辑对象，包含：init/bindEvents/getData/initComponents等方法，init中只对业务做初始化操作</li>
<li>init 对外接口: 提供对外统一调用初始化方法</li>
</ul>
<h4 id="模块模板"><a href="#模块模板" class="headerlink" title="模块模板"></a>模块模板</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">define([<span class="string">'moment'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">moment</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> pageVM, CONF, pageView;</div><div class="line"></div><div class="line">	<span class="comment">// [ <span class="doctag">TODO:</span> 模块配置 ]</span></div><div class="line">	CONF=&#123;</div><div class="line">		<span class="attr">apiGetList</span>:<span class="string">'getOrderList.json'</span>,</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="comment">// [ <span class="doctag">TODO:</span> 模块主逻辑处理 ]</span></div><div class="line">	pageView = &#123;</div><div class="line">		<span class="attr">init</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="comment">// [ <span class="doctag">TODO:</span> 模块数据模型初始化 ] (建议有表单时使用)</span></div><div class="line">			!pageVM &amp;&amp; <span class="keyword">this</span>.initVM(); 			<span class="comment">//初始化ViewModel</span></div><div class="line"></div><div class="line">			<span class="keyword">this</span>.initComponents();  <span class="comment">// 初始化组件：select2、tolltip、uploader</span></div><div class="line">			<span class="keyword">this</span>.getListData(); 	<span class="comment">//加载列表数据</span></div><div class="line">			<span class="keyword">this</span>.selectChangeEv();  <span class="comment">//注册下拉框变化事件</span></div><div class="line">		&#125;,</div><div class="line">		<span class="attr">initVM</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			pageVM = avalon.define(&#123;</div><div class="line">				<span class="attr">$id</span>:<span class="string">'recordsCtr'</span>,</div><div class="line">				<span class="attr">searching</span>:<span class="literal">false</span>,</div><div class="line">				<span class="attr">searchPms</span>:&#123;</div><div class="line">					<span class="attr">status</span>:<span class="string">'0'</span>,</div><div class="line">					<span class="attr">startTime</span>:<span class="string">''</span>,</div><div class="line">					<span class="attr">endTime</span>:<span class="string">''</span>,</div><div class="line">					<span class="attr">index</span>:<span class="number">0</span>,</div><div class="line">					<span class="attr">length</span>:<span class="number">10</span>,</div><div class="line">				&#125;</div><div class="line">				searchEv:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">					e.preventDefault();</div><div class="line">					pageVM.searching=<span class="literal">true</span>;</div><div class="line">					pageVM.searchPms.index=<span class="number">0</span>;</div><div class="line">					page.getListData();</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">selectChangeEv</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; ... &#125;,</div><div class="line">		<span class="attr">initComponents</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; ... &#125;,</div><div class="line">		<span class="attr">getListData</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; ... &#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// [ <span class="doctag">TODO:</span> 对外提供统一的调用接口 ]</span></div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="attr">init</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			pageView.init();</div><div class="line">			avalon.scan();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h4><ul>
<li>接口名称： 以 <code>api</code> 开头 + 接口名  <code>{apiGetSalesList:&#39;getSalesList&#39;}</code></li>
<li>事件名称： 事件名称 + 以 <code>Ev</code> 结尾 <code>changeColorEv</code></li>
<li>this指向修正：统一以 <code>_this</code> 命名</li>
<li>jQuery变量以<code>$</code>符号开头 <code>$btnSearch=$(&#39;#btnSearch&#39;)</code></li>
</ul>
<h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ol>
<li>每个模块 <strong>init</strong> 是入口函数，也就是第一次加载时，整个模块代码顺序执行，以后的每次页面初始化，都只会执行init中的代码</li>
<li>每个模块 <code>VM</code> 中 <strong>$id</strong> 不允许重名</li>
<li>每个页面的artTemplate <strong>模板id</strong> 不允许重名，因为模板有缓存，id相同会覆盖已有的模板</li>
<li>每个页面的DOM上的 <strong>id</strong> 尽量不要相同</li>
</ol>
<h4 id="数据加载处理"><a href="#数据加载处理" class="headerlink" title="数据加载处理"></a>数据加载处理</h4><p>要考虑的问题：数据列表加载的重用性、Loading触发的时机、何时需要分页、点击分页的处理、搜索处理</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">getListData:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">// 构建查询参数</span></div><div class="line">	<span class="keyword">var</span> pms = $.extend(&#123;&#125;,pageVM.$model.searchPms),</div><div class="line">		url = CONF.apiGetList,    <span class="comment">//数据加载接口</span></div><div class="line">		$tbl = $(<span class="string">'#listTbl'</span>),	  <span class="comment">//列表所在的容器</span></div><div class="line">		$tbdBox = $(<span class="string">'#listTbd'</span>),  <span class="comment">//列表项所在的tbody</span></div><div class="line">		$total = $(<span class="string">'#listTotal'</span>), <span class="comment">//数据总条数</span></div><div class="line">		$pageBox = $(<span class="string">'#pageNumBox'</span>); <span class="comment">//分页容器</span></div><div class="line"></div><div class="line">	pms.startTime = Utils.getUnixTime(pms.startTime);</div><div class="line">	pms.endTime = Utils.getUnixTime(pms.endTime);</div><div class="line"></div><div class="line">	<span class="comment">// 数据加载前显示Loading状态</span></div><div class="line">	$tbl.uiLoading(<span class="string">'lg'</span>);</div><div class="line"></div><div class="line">	<span class="comment">// 异步加载数据，并返回 deffered 对象</span></div><div class="line">	<span class="keyword">return</span> $.post(url, pms)</div><div class="line">			.done(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">				<span class="keyword">if</span>(data.status===<span class="string">'0'</span>)&#123;</div><div class="line">					<span class="keyword">var</span> listData = data.result.orderList,</div><div class="line">						count = data.result.count;</div><div class="line"></div><div class="line">					<span class="comment">// 显示总数据条数</span></div><div class="line">					$total.text(count);</div><div class="line"></div><div class="line">					<span class="comment">//如果有数据</span></div><div class="line">					<span class="keyword">if</span>(count&gt;<span class="number">0</span>)&#123;</div><div class="line">						<span class="comment">// 渲染数据</span></div><div class="line">						$tbdBox.html(template(<span class="string">'list_record_tpl'</span>, &#123;<span class="attr">data</span>: listData, <span class="attr">url</span>:CONF.orderUrl&#125;));</div><div class="line"></div><div class="line">						<span class="comment">// 如果总数据条数大于请求的数据条数，就显示分页</span></div><div class="line">						<span class="keyword">if</span>(count &gt; pms.length)&#123;</div><div class="line">							$pageBox.pagination(&#123;</div><div class="line">								<span class="attr">totalData</span>:count,</div><div class="line">								<span class="attr">coping</span>:<span class="literal">true</span>,</div><div class="line">								<span class="attr">showData</span>:pms.length,</div><div class="line">								<span class="attr">callback</span>:<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">									<span class="comment">// 计算起始索引</span></div><div class="line">									pms.index = (i<span class="number">-1</span>)*pms.length;</div><div class="line">									<span class="comment">//显示Loading</span></div><div class="line">									$tbl.uiLoading(<span class="string">'lg'</span>);</div><div class="line">									<span class="comment">//加载数据</span></div><div class="line">									$.post(url,pms)</div><div class="line">										.done(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">											<span class="comment">// 渲染数据</span></div><div class="line">											$tbdBox.html(template(<span class="string">'list_record_tpl'</span>, &#123;<span class="attr">data</span>: data.result.orderList, <span class="attr">url</span>:CONF.orderUrl&#125;));</div><div class="line">											<span class="comment">// 隐藏Loading</span></div><div class="line">											$tbl.uiLoading(<span class="string">'lg'</span>);</div><div class="line">										&#125;);</div><div class="line">								&#125;</div><div class="line">							&#125;);</div><div class="line">						&#125;</div><div class="line">					&#125;<span class="keyword">else</span>&#123;</div><div class="line">						<span class="comment">// 清空分页和列表数据，并添加为空说明</span></div><div class="line">						$tbdBox.html(<span class="string">'&lt;tr&gt;&lt;td colspan="7"&gt;&lt;p class="p20 c-8 text-center"&gt; 未查询到相关数据 &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;'</span>);</div><div class="line">						$pageBox.html(<span class="string">''</span>);</div><div class="line">					&#125;</div><div class="line">				&#125;<span class="keyword">else</span>&#123;</div><div class="line">					<span class="comment">// 提示加载失败信息</span></div><div class="line">					toastr.error(data.errmsg || <span class="string">'服务器繁忙！'</span>);</div><div class="line">				&#125;</div><div class="line">			&#125;)</div><div class="line">			.always(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="comment">//加载失败时，隐藏loading状态</span></div><div class="line">				$tbl.uiLoading(<span class="string">'lg'</span>);</div><div class="line">				pageVM.searching = <span class="literal">false</span>;</div><div class="line">			&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xi480.com1.z0.glb.clouddn.com/1246515077564.jpg?imageView2/1/w/720/h/400&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;React或Vue给我来带来的不是仅仅是View层的改变和便捷的组件化开发，更多的是围绕这套开发体系，整个技术栈的应用和实践。&lt;br&gt;但很多管理系统还是基于传统的AMD或CMD开发，配合Jquery插件使用，所以日常的组件和模块编写应该有一定的规范，以减少多人配合开发的沟通成本，统一编码风格，便于维护管理，也便于后期重构切换到新的技术栈。&lt;br&gt;
    
    </summary>
    
      <category term="web开发" scheme="http://www.qiakr.com/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>数组方法介绍</title>
    <link href="http://www.qiakr.com/2016/07/17/array-methods/"/>
    <id>http://www.qiakr.com/2016/07/17/array-methods/</id>
    <published>2016-07-17T04:00:27.000Z</published>
    <updated>2016-07-20T04:30:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>介绍数组方法的基本用法<br><a id="more"></a></p>
<p><img src="http://7xi480.com1.z0.glb.clouddn.com/blog-002.jpg?imageView2/1/w/720/h/400" alt=""></p>
<h2 id="1-数组的创建"><a href="#1-数组的创建" class="headerlink" title="1. 数组的创建"></a>1. 数组的创建</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array= <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"><span class="keyword">var</span> arra=[];</div><div class="line"><span class="keyword">var</span> array=[size];</div><div class="line"><span class="keyword">var</span> array=[ele,ele,ele,...]</div><div class="line"><span class="keyword">var</span> a=<span class="number">1</span>; <span class="keyword">var</span> array=[a,a+<span class="number">1</span>];</div></pre></td></tr></table></figure>
<h2 id="2-数组操作"><a href="#2-数组操作" class="headerlink" title="2. 数组操作"></a>2. 数组操作</h2><h3 id="2-1-array-push-ele，ele，-和array-pop-后进和后出"><a href="#2-1-array-push-ele，ele，-和array-pop-后进和后出" class="headerlink" title="2.1 array.push(ele，ele，..)和array.pop() 后进和后出"></a>2.1 array.push(ele，ele，..)和array.pop() 后进和后出</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">push将参数添加到原数组末尾，并返回数组的长度 </div><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> b = a.push(<span class="number">6</span>,<span class="number">7</span>); <span class="comment">//a:[1,2,3,4,5,6,7]  b:7</span></div><div class="line">pop删除原数组最后一项，并返回删除元素的值；如果数组为空则返回<span class="literal">undefined</span></div><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> b = a.pop(); <span class="comment">//a:[1,2,3,4] b:5</span></div></pre></td></tr></table></figure>
<h3 id="2-2-array-unshift-ele-ele-和array-shift-先进和先出"><a href="#2-2-array-unshift-ele-ele-和array-shift-先进和先出" class="headerlink" title="2.2 array.unshift(ele,ele,..)和array.shift() 先进和先出"></a>2.2 array.unshift(ele,ele,..)和array.shift() 先进和先出</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">将参数添加到原数组开头，并返回数组的长度 </div><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> b = a.unshift(<span class="number">6</span>,<span class="number">7</span>); <span class="comment">//a:[6,7,1,2,3,4,5] b:7</span></div><div class="line">删除原数组第一项，并返回删除元素的值；如果数组为空则返回<span class="literal">undefined</span> </div><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];   </div><div class="line"><span class="keyword">var</span> b = a.shift(); <span class="comment">//a:[2,3,4,5] b:1</span></div></pre></td></tr></table></figure>
<h3 id="2-3-arrary-splice-index-many-ele-ele"><a href="#2-3-arrary-splice-index-many-ele-ele" class="headerlink" title="2.3 arrary.splice(index,many,ele,ele..)"></a>2.3 arrary.splice(index,many,ele,ele..)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">index:插入或删除的起始位置 many:进行操作的长度 ele:要插入的值(可选)</div><div class="line">数组中插入或者删除元素,改变原始数组，返回被删除的项目</div><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];   </div><div class="line"><span class="keyword">var</span> b = a.splice(<span class="number">2</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>); <span class="comment">//a:[1,2,7,8,9,5] b:[3,4]</span></div></pre></td></tr></table></figure>
<h3 id="2-4-arrary-concat"><a href="#2-4-arrary-concat" class="headerlink" title="2.4 arrary.concat()"></a>2.4 arrary.concat()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">返回一个新数组，是将参数添加到原数组中构成的 </div><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];   </div><div class="line"><span class="keyword">var</span> b = a.concat(<span class="number">6</span>,<span class="number">7</span>); <span class="comment">//a:[1,2,3,4,5] b:[1,2,3,4,5,6,7]</span></div></pre></td></tr></table></figure>
<h3 id="2-5-array-slice-0-array-concat"><a href="#2-5-array-slice-0-array-concat" class="headerlink" title="2.5 array.slice(0) array.concat()"></a>2.5 array.slice(0) array.concat()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">拷贝数组</div><div class="line"><span class="keyword">var</span> array1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>); </div><div class="line"><span class="keyword">var</span> array2; </div><div class="line">array2 = array1.slice(<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> array1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>); </div><div class="line"><span class="keyword">var</span> array2; </div><div class="line">array2 = array1.concat();</div></pre></td></tr></table></figure>
<h3 id="2-6-array-reverse"><a href="#2-6-array-reverse" class="headerlink" title="2.6 array.reverse()"></a>2.6 array.reverse()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">将数组反序 </div><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];   </div><div class="line"><span class="keyword">var</span> b = a.reverse(); <span class="comment">//a:[5,4,3,2,1] b:[5,4,3,2,1]</span></div></pre></td></tr></table></figure>
<h3 id="2-7-array-sort-sortby"><a href="#2-7-array-sort-sortby" class="headerlink" title="2.7 array.sort(sortby)"></a>2.7 array.sort(sortby)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sortby:可选。规定排序顺序。必须是函数</div><div class="line">数组排序</div><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">3</span>,<span class="string">"a"</span>,<span class="number">2</span>,<span class="number">5</span>];   </div><div class="line"><span class="keyword">var</span> b = a.sort();</div><div class="line"><span class="built_in">console</span>.log(a,b) [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="string">"a"</span>] [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="string">"a"</span>]</div></pre></td></tr></table></figure>
<h3 id="2-8-array-join-separator"><a href="#2-8-array-join-separator" class="headerlink" title="2.8 array.join(separator)"></a>2.8 array.join(separator)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">将数组的元素组起一个字符串，以separator为分隔符，省略的话则用默认用逗号为分隔符.</div><div class="line">var a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];   </div><div class="line"><span class="keyword">var</span> b = a.join(<span class="string">"|"</span>); <span class="comment">//a:[1,2,3,4,5] b:"1|2|3|4|5"</span></div></pre></td></tr></table></figure>
<p><strong>ES5后新加入内容</strong></p>
<h3 id="2-8-array-forEach-function-v-i-a"><a href="#2-8-array-forEach-function-v-i-a" class="headerlink" title="2.8 array.forEach(function(v,i,a))"></a>2.8 array.forEach(function(v,i,a))</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">v:数值 i:索引 a:数组本身</div><div class="line">数组元素，索引，数组本身,无提前终止<span class="keyword">break</span>,可使用<span class="keyword">try</span>，<span class="keyword">catch</span>语句终止.</div><div class="line">var a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];   </div><div class="line">a.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v,i,a</span>)</span>&#123;a[i]=v+<span class="number">1</span>;&#125;) [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</div></pre></td></tr></table></figure>
<h3 id="2-9-array-map"><a href="#2-9-array-map" class="headerlink" title="2.9 array.map()"></a>2.9 array.map()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">每个元素传给指定的函数，返回一个数组，类似forEach但返回新数组</div><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];   </div><div class="line">b=a.map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;<span class="keyword">return</span> x*x;&#125;) [<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>]</div></pre></td></tr></table></figure>
<h3 id="2-10-array-filter"><a href="#2-10-array-filter" class="headerlink" title="2.10 array.filter()"></a>2.10 array.filter()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">每个元素传给指定的函数，返回一个调用数组的子集</div><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];   </div><div class="line">b=a.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;<span class="keyword">return</span> x&gt;<span class="number">1</span>;&#125;)</div><div class="line"><span class="built_in">console</span>.log(a,b)</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] [<span class="number">2</span>, <span class="number">3</span>]</div></pre></td></tr></table></figure>
<h3 id="2-11-array-every-array-some"><a href="#2-11-array-every-array-some" class="headerlink" title="2.11 array.every() array.some()"></a>2.11 array.every() array.some()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">每个元素传给指定的函数，返回<span class="literal">true</span> or falsse </div><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];   </div><div class="line">a.every(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;<span class="keyword">return</span> x&gt;<span class="number">1</span>;&#125;) <span class="literal">false</span>  所有</div><div class="line">a.sone(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;<span class="keyword">return</span> x&gt;<span class="number">1</span>;&#125;) <span class="literal">true</span>  存在</div></pre></td></tr></table></figure>
<h3 id="2-12-array-reduce-array-reduceRight"><a href="#2-12-array-reduce-array-reduceRight" class="headerlink" title="2.12 array.reduce() array.reduceRight()"></a>2.12 array.reduce() array.reduceRight()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">每个元素传给指定的函数，进行组合，传回单个值</div><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];   </div><div class="line">b=a.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;<span class="keyword">return</span> x+y;&#125;,<span class="number">0</span>) 求和</div><div class="line"><span class="built_in">console</span>.log(b)</div><div class="line"><span class="number">2</span>个参数 <span class="number">1</span>个位所执行的函数  <span class="number">2</span>位初始值(可选)</div><div class="line">reduceRight() 从右到左执行</div></pre></td></tr></table></figure>
<h3 id="2-13-array-indexOf-array-lastIndexOf"><a href="#2-13-array-indexOf-array-lastIndexOf" class="headerlink" title="2.13 array.indexOf() array.lastIndexOf()"></a>2.13 array.indexOf() array.lastIndexOf()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">整个数组中搜寻给定的值,有返回其位置,无返回<span class="number">-1</span>，lastIndexOf从右开始搜寻</div><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];   </div><div class="line">a.indexOf(<span class="number">1</span>) <span class="number">0</span></div><div class="line">a.indexOf(<span class="number">6</span>) <span class="number">-1</span></div><div class="line">a.lastIndexOf(<span class="number">1</span>) <span class="number">2</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍数组方法的基本用法&lt;br&gt;
    
    </summary>
    
      <category term="web开发" scheme="http://www.qiakr.com/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>HTML标签之Table</title>
    <link href="http://www.qiakr.com/2016/07/17/html-table/"/>
    <id>http://www.qiakr.com/2016/07/17/html-table/</id>
    <published>2016-07-17T04:00:27.000Z</published>
    <updated>2016-07-20T04:34:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>Table标签使用<br><a id="more"></a></p>
<p><img src="http://7xi480.com1.z0.glb.clouddn.com/blog-8070819_8070819_1308583954215.jpg?imageView2/1/w/720/h/400" alt=""></p>
<h3 id="1、-lt-thead-gt"><a href="#1、-lt-thead-gt" class="headerlink" title="1、&lt;thead&gt;"></a>1、<code>&lt;thead&gt;</code></h3><p>整个第一行的部分没有包含数据，它只是每个列的标题。因此，我们可以<code>&lt;thead</code>&gt;元素来完成这件事情，它会包裹第一个<code>&lt;tr&gt;</code>元素(它会包裹所有的行所需要的头部信息)；<br>当你使用了<code>&lt;thead&gt;</code>元素后，<code>&lt;table&gt;</code>元素中不能有直接的<code>&lt;tr&gt;</code>子元素，所有的行必须存在于<code>&lt;thead&gt;</code>，<code>&lt;tbody&gt;</code>和<code>&lt;tfoot&gt;</code>里面。要注意的是我们会把所有的数据行包含在<code>&lt;tbody&gt;</code>里面。</p>
<h3 id="2、-lt-tfoot-gt"><a href="#2、-lt-tfoot-gt" class="headerlink" title="2、&lt;tfoot&gt;"></a>2、<code>&lt;tfoot&gt;</code></h3><p><code>&lt;tfoot&gt;</code>独一无二的一点是它在HTML中的位置，它紧跟着<code>&lt;thead&gt;</code>并位于<code>&lt;tbody&gt;</code>的前面！你可能会认为它是table标签结束前的最后一个元素，但情况并不是这样。因为页脚可能包含了用于理解表格的必要信息，因为在资源序列中它应当排在在数据的前面。 在一些元素位置根据需要从上至下跳动的布局中，<code>&lt;tfoot&gt;</code>是个不错的技巧。举个例子，虽然一个导航在屏幕的底部，但在HTML源码中导航应该在顶部。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Favorite Color<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>tfoot<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Favorite Color<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Jim<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>00001<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Blue<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"> </div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>Favorite Color<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>tfoot<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>Favorite Color<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>Jim<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>00001<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>Blue<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="3、单元格：td和th"><a href="#3、单元格：td和th" class="headerlink" title="3、单元格：td和th"></a>3、单元格：<code>td</code>和<code>th</code></h3><p>在表格中一个独立的单元格总是<code>&lt;td&gt;</code>或<code>&lt;th&gt;</code>两者之一，只要你愿意，你可以把任何东西放进表格的单元格中，但要使这些元素成为表格中的单元格元素。<code>&lt;th&gt;</code>是“表格的标题”一般用在一列的第一格,里面的内容会自动加粗加黑他们，<code>&lt;td&gt;</code>是“表格的数据”。</p>
<h3 id="4、基本样式"><a href="#4、基本样式" class="headerlink" title="4、基本样式"></a>4、基本样式</h3><p>你看到的大多数表格都用颜色和线条来区别表格的不同部分。边框是非常常见的。默认的，所有的单元格相互之间都有2px的空隙<br>bordercolor =”边框颜色”<br>cellspacing =”单元格之间的距离，外边距”<br>cellpadding =”单元格与内容之间的距离，内边距”<br>bgcolor =”背景颜色”<br>align =”水平对齐方式”<br>valign =”垂直对齐方式”</p>
<h4 id="border-collapse"><a href="#border-collapse" class="headerlink" title="border-collapse"></a>border-collapse</h4><ul>
<li>用于表格属性, 表示表格的两边框合并为一条。 </li>
<li>默认值：<strong>separate</strong>边框会被分开。不会忽略border-spacing 和 empty-cells 属性。</li>
<li><strong>collapse</strong>：如果可能，边框会合并为一个单一的边框。会忽略border-spacing 和 empty-cells 属性。</li>
<li><strong>inherit</strong>：规定应该从父元素继承border-collapse属性的值。</li>
</ul>
<h4 id="border-spacing"><a href="#border-spacing" class="headerlink" title="border-spacing"></a>border-spacing</h4><ul>
<li>属性设置相邻单元格的边框间的距离（仅用于“边框分离”模式）。</li>
<li><strong>length length</strong>: 规定相邻单元的边框之间的距离。使用 px、cm 等单位。不允许使用负值。 如果定义一个 length 参数，那么定义的是水平和垂直间距。 如果定义两个 length参数，那么第一个设置水平间距，而第二个设置垂直间距。</li>
<li><strong>inherit</strong>:规定应该从父元素继承 border-spacing 属性的值。</li>
</ul>
<p>table表格td设置宽度后文字太多导致自动换行：<br>1.设置表格table的样式为：style=”table-layout:fixed;”<br>2.然后设置td的样式为：style=”word-wrap:break-word;”</p>
<h3 id="5、合并单元格"><a href="#5、合并单元格" class="headerlink" title="5、合并单元格"></a>5、合并单元格</h3><p>有两个能应用在任何单元格中的重要的属性（<code>&lt;td&gt;</code>或<code>&lt;th&gt;</code>）：colspan 和 rowspan 。他们接受任何大于等于2的正整数。如果一个 td 元素的 colspan 值为2（<code>&lt;td colspan=&quot;2&quot;&gt;</code>），它将仍然是单独的单元格，但它<br>会在一行中水平的占据两个单元格的空间。rowspan也一样，但它作用于垂直方向。</p>
<h3 id="6、使语义元素表现地像一个表格"><a href="#6、使语义元素表现地像一个表格" class="headerlink" title="6、使语义元素表现地像一个表格"></a>6、使语义元素表现地像一个表格</h3><p>display: table                /<em> <code>&lt;table&gt;</code>     </em>/<br>display: table-cell           /<em> <code>&lt;td&gt;</code>        </em>/<br>display: table-row            /<em> <code>&lt;tr&gt;</code>        </em>/<br>display: table-column         /<em> <code>&lt;col&gt;</code>       </em>/<br>display: table-column-group   /<em> <code>&lt;colgroup&gt;</code>  </em>/<br>display: table-footer-group   /<em> <code>&lt;tfoot&gt;</code>     </em>/<br>display: table-header-group   /<em> <code>&lt;thead&gt;</code>     </em>/</p>
<p>注意这里没有<th>的值，这是因为语义的关系，</th><th>和</th><td>的表现实际上是相同的，所以没必要多增加这样一个值。</td></p>
<p>display: inline-table<br>表格是自适应宽度的。它就像 inline-block 元素一样。顾名思义，这个值使得它们成为一个 inline-block 元素而不会产生换行。</p>
<h3 id="7、colgroup与col"><a href="#7、colgroup与col" class="headerlink" title="7、colgroup与col"></a>7、colgroup与col</h3><p>colgroup、col 标签用来定义表格列的分组。<br>通过使用 <code>&lt;colgroup&gt;</code>标签，可以向整个列应用样式，而不需要重复为每个单元格或每一行设置样式。<br>如果想对 <code>&lt;colgroup&gt;</code> 中的某列定义不同的属性，请在 <code>&lt;colgroup&gt;</code> 标签内使用 <code>&lt;col&gt;</code> 标签。<br>col标签为表格中一个或多个列定义属性值。<br>colgroup标签用于对表格中的列进行组合，以便对其进行格式化。 </p>
<h3 id="8、“隐含”元素和未关闭的标签"><a href="#8、“隐含”元素和未关闭的标签" class="headerlink" title="8、“隐含”元素和未关闭的标签"></a>8、“隐含”元素和未关闭的标签</h3><ul>
<li><code>&lt;col&gt;</code>标签是属于那种无内容的不需要闭合的标签，类似<code>&lt;br&gt;/&lt;br /&gt;</code>；</li>
<li><code>&lt;td&gt;</code>元素在这些情况中是无需闭合的：“如果<td>元素后面没有更多的<code>&lt;td&gt;或&lt;th&gt;</code>元素或者在它父元素中没有更多的内容，闭合标签是可以省略的。”；</td></li>
<li>缺少的<code>&lt;/tr&gt;</code>标签的原理也是相同的：“如果<tr>元素后面没有紧跟着一个</tr><tr>元素或者如果它父元素组(<thead>,<br><tbody>或者 <tfoot>)没有更多的内容，结束标签是可以省略的。”；</tfoot></tbody></thead></tr></li>
</ul>
<h3 id="9、高亮鼠标所在的行-列-单元格"><a href="#9、高亮鼠标所在的行-列-单元格" class="headerlink" title="9、高亮鼠标所在的行/列/单元格"></a>9、高亮鼠标所在的行/列/单元格</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">td:hover &#123; </div><div class="line">  <span class="attr">background</span>: yellow;</div><div class="line">&#125;</div><div class="line">tr:hover &#123;</div><div class="line">  <span class="attr">background</span>: yellow;</div><div class="line">&#125;</div><div class="line"></div><div class="line">鼠标移动动一个单元格的时候他所在的列与行全部选中</div><div class="line"><span class="keyword">var</span> allCells = $(<span class="string">"td, th"</span>);</div><div class="line">allCells.on(<span class="string">"mouseover"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> el = $(<span class="keyword">this</span>),</div><div class="line">        pos = el.index();</div><div class="line">    el.parent().find(<span class="string">"th, td"</span>).addClass(<span class="string">"hover"</span>);</div><div class="line">    allCells.filter(<span class="string">":nth-child("</span> + (pos+<span class="number">1</span>) + <span class="string">")"</span>).addClass(<span class="string">"hover"</span>);</div><div class="line">  &#125;)</div><div class="line">  .on(<span class="string">"mouseout"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    allCells.removeClass(<span class="string">"hover"</span>);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line"> 表格自身设置圆角时需要设置border-collapse: separate;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Table标签使用&lt;br&gt;
    
    </summary>
    
      <category term="web开发" scheme="http://www.qiakr.com/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>ES5特性介绍</title>
    <link href="http://www.qiakr.com/2016/06/29/ES5-new-features/"/>
    <id>http://www.qiakr.com/2016/06/29/ES5-new-features/</id>
    <published>2016-06-29T07:50:10.000Z</published>
    <updated>2016-06-29T08:09:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xi480.com1.z0.glb.clouddn.com/AxiaVillage_ZH-CN10956625064_1920x1080.jpg?imageView2/1/w/720/h/400" alt=""></p>
<p>2011年6月，ECMAscript 5.1版发布，并且成为ISO国际标准，简称ES5。<br><a id="more"></a></p>
<h2 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h2><p>IE9+ , Android Browser 4.3+, Safari5.1+, Chrome22+, FireFox20+, Opera12.1+</p>
<iframe src="http://caniuse.com/#search=es5" frameborder="0" style="width:100%; height: 250px;"></iframe>


<h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>在函数内顶部或模块顶部添加: <code>&quot;use strict&quot;;</code> 以开启对该作用域的语法检查。</p>
<p>在严格模式下有以下限制：</p>
<ul>
<li>未声明的变量赋值抛出一个ReferenceError, 而不是创建一个全局变量。</li>
<li>var定义只能在函数级，if、for、while、switch等不能有var定义</li>
<li>一个对象字面量中不能声明两个名称相同的属性。一个函数也不能有名称相同的形式参数。</li>
<li>arguments <ul>
<li>不能使用arguments、eval、let、const作为标识符(变量名方法名等)</li>
<li>不能修改作为函数内部对象的arguments，因此形式参数和arguments之间不再有同步变化 </li>
<li>不能访问arguments.callee </li>
<li>ES5中定义了arguments.caller属性，它的值始终是undefined，主要用于区分arguments.caller和函数的caller，但是不能在严格模式下访问 </li>
</ul>
</li>
<li>普通的函数调用中this是null</li>
<li>试图改变只读属性将会抛出异常</li>
<li>delete失败会抛出异常</li>
<li>eval中不再能声明变量，声明的函数将会变成全局的</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function f1 (c1, c2)&#123;</div><div class="line">	&apos;use strict&apos;;</div><div class="line">	var arguments=9; // Unexpected eval or arguments in strict mode</div><div class="line">	console.log(arguments); //[2, 3]</div><div class="line">	console.log(arguments[0]); //2</div><div class="line">	arguments[0]=12; </div><div class="line">	console.log(arguments[0]); //12</div><div class="line">	console.log(c1); //2</div><div class="line">	console.log(arguments.callee);//Uncaught TypeError: &apos;caller&apos;, &apos;callee&apos;, and &apos;arguments&apos; properties may not be accessed</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="JSON对象"><a href="#JSON对象" class="headerlink" title="JSON对象"></a>JSON对象</h2><p>ES5提供一个全局的JSON对象</p>
<p>JSON.stringify(obj, fn/arr, number) 序列化 </p>
<ul>
<li>第一个参数是待转换的 ECMAScript 对象，</li>
<li>第二个参数可以是一个函数或是数组。如果是函数，则转换的结果由该函数来确定；如果是数组，则只有出现在数组中的属性名称，才会出现在转换之后的结果中。</li>
<li>第三个参数是用来控制转换结果中文本的缩进，以更好的进行显示。</li>
</ul>
<p>JSON.parse(str, fn) 反序列化</p>
<ul>
<li>第一个参数是 JSON 文本，需要符合 JSON 格式的要求。</li>
<li>第二个参数是一个函数，可以用来对解析过程中得到的属性名值对进行过滤和转换。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">var jsonStr = &apos;&#123;&quot;a&quot;:1, &quot;b&quot;:2, &quot;c&quot;:3&#125;&apos;; </div><div class="line">JSON.parse(jsonStr); </div><div class="line"></div><div class="line">JSON.parse(jsonStr, function(key, value) &#123; </div><div class="line">	return typeof value === &apos;number&apos; ? value * 2 : value; </div><div class="line">&#125;); // 结果为 &#123;a:2, b:4, c:6&#125; </div><div class="line"></div><div class="line">JSON.parse(jsonStr, function(key, value) &#123; </div><div class="line">	return typeof value === &apos;number&apos; &amp;&amp; value % 2 === 0 ? undefined : value; </div><div class="line">&#125;); // 结果为 &#123;a:1, b:3&#125;</div><div class="line"></div><div class="line">var user = &#123; </div><div class="line">    name : &apos;Alex&apos;, </div><div class="line">    password : &apos;password&apos;, </div><div class="line">    email : &apos;alex@example.org&apos;</div><div class="line"> &#125;; </div><div class="line"></div><div class="line"> JSON.stringify(user); </div><div class="line"> JSON.stringify(user, [&apos;name&apos;]); // 输出结果为“&#123;&quot;name&quot;:&quot;Alex&quot;&#125;”</div><div class="line"> JSON.stringify(user, function(key, value) &#123; </div><div class="line">    if (key === &apos;email&apos;) &#123; </div><div class="line">        return &apos;******&apos;; </div><div class="line">    &#125; </div><div class="line">    if (key === &apos;password&apos;) &#123; </div><div class="line">        return undefined; </div><div class="line">    &#125; </div><div class="line">    return value; </div><div class="line"> &#125;);  // 输出结果为“&#123;&quot;name&quot;:&quot;Alex&quot;,&quot;email&quot;:&quot;******&quot;&#125;”</div><div class="line"> JSON.stringify(user, null, 4);</div><div class="line">=&gt;</div><div class="line">&#123;</div><div class="line">    &quot;name&quot;: &quot;Alex&quot;,</div><div class="line">    &quot;password&quot;: &quot;password&quot;,</div><div class="line">    &quot;email&quot;: &quot;alex@example.org&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意：</strong><br>JSON.parse()必须接收严格的JSON格式，否则报错，比如键名必须使用双引号括起来</p>
<h2 id="Object的扩展"><a href="#Object的扩展" class="headerlink" title="Object的扩展"></a>Object的扩展</h2><p>对象的属性有了更多的控制</p>
<ul>
<li>继承相关方法：create()、getPrototypeOf() </li>
<li>属性相关方法：defineProperty()、defineProperties()、getOwnPropertyDescriptor()、getOwnPropertyNames()、keys() </li>
<li>防篡改方法：preventExtensions()、isExtensible()、seal()、isSealed()、freeze()、isFrozen() </li>
</ul>
<p>Object.preventExtensions、Object.seal 和 Object.freeze 函数可以用来保护对象，防止被第三方有意或无意的修改。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">var cat = &#123;&#125;;</div><div class="line"></div><div class="line">Object.defineProperty(cat, &quot;name&quot;, &#123;</div><div class="line">  value: &quot;Maru&quot;,</div><div class="line">  writable: false,</div><div class="line">  enumerable: true,</div><div class="line">  configurable: false</div><div class="line">&#125;);</div><div class="line"></div><div class="line">Object.defineProperty(cat, &quot;skill&quot;, &#123;</div><div class="line">  value: &quot;exploring boxes&quot;,</div><div class="line">  writable: true,</div><div class="line">  enumerable: true,</div><div class="line">  configurable: true</div><div class="line">&#125;);</div><div class="line"></div><div class="line">var obj = &#123;&#125;; </div><div class="line">Object.defineProperty(obj, &apos;val&apos;, &#123;&#125;); // 创建一个新属性，特性为默认值</div><div class="line">obj.val = 1; </div><div class="line"></div><div class="line">Object.defineProperty(obj, &apos;CONSTANT&apos;, &#123;value : 32, writable : false&#125;); // 创建一个只读属性</div><div class="line">obj.CONSTANT = 16; // 对属性的修改是无效的，但是不会抛出错误</div><div class="line"></div><div class="line">Object.defineProperty(obj, &quot;newVal&quot;, &#123;enumerable: true&#125;); </div><div class="line">for (var key in obj) &#123; </div><div class="line">	console.log(key); // 可以枚举出 newVal </div><div class="line">&#125;</div><div class="line"></div><div class="line">var initValue = 0; </div><div class="line">Object.defineProperty(obj, &quot;initValue&quot;, &#123; </div><div class="line">		get : function() &#123; </div><div class="line">		    return initValue; </div><div class="line">		&#125;, </div><div class="line">		set : function(val) &#123; </div><div class="line">	    	if (val &gt; 0) &#123; </div><div class="line">	        	initValue = val; </div><div class="line">	    &#125; </div><div class="line">	&#125; </div><div class="line">&#125;);</div><div class="line"></div><div class="line">var obj = &#123;val : 1&#125;; </div><div class="line">obj.newVal = &quot;Hello&quot;; </div><div class="line"></div><div class="line">Object.seal(obj); </div><div class="line">Object.defineProperty(obj, &apos;anotherVal&apos;, &#123;&#125;); // 抛出 TypeError 错误</div></pre></td></tr></table></figure>
<h2 id="Array的扩展"><a href="#Array的扩展" class="headerlink" title="Array的扩展"></a>Array的扩展</h2><p>扩展的迭代或缩小方法都不会改变原有的数组，只会返回处理后的新数组。</p>
<ul>
<li>判断方法：添加了静态方法Array.isArray(obj)用于判断obj是否为一个Array对象的实例。 </li>
<li>索引方法：添加了两个用于查找指定项索引的方法indexOf()和lastIndexOf()。查找时使用全等（===）进行匹配。 </li>
<li>迭代方法：添加了every()、some()、forEach()、map()、filter()方法。 </li>
<li>缩小方法：添加了reduce()和reduceRight()方法。 </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var arr = [2,9,4,5,3,7,2];</div><div class="line">console.log(Array.isArray(arr)); //true</div><div class="line">console.log(arr.indexOf(2)); //0</div><div class="line">console.log(arr.lastIndexOf(2)); //6</div><div class="line">console.log(arr.every(function(v,i)&#123; return v &gt; 1 &#125;)); //true</div><div class="line">console.log(arr.some(function(v,i)&#123; return v&gt;6 &#125;)); //true</div><div class="line">console.log(arr.map(function(v,i)&#123; return v&gt;5 &#125;)); //[false, true, false, false, false, true, false]</div><div class="line">console.log(arr.filter(function(v,i)&#123; return v&gt;6 &#125;)); //[9, 7]</div><div class="line">console.log(arr.reduce(function(pre, v, i)&#123; return res+v &#125;)); //32</div><div class="line">console.log(arr.reduceRight(function(pre, v, i)&#123; return res*v &#125;)); //15120</div></pre></td></tr></table></figure>
<h2 id="Function的扩展"><a href="#Function的扩展" class="headerlink" title="Function的扩展"></a>Function的扩展</h2><ul>
<li>函数中不能出现两个同名的形式参数 </li>
<li>不能给函数的caller属性赋值 </li>
<li>未指定环境对象而调用函数，this值不会指向window，而是undefined </li>
<li>添加了bind()方法。 </li>
<li>规范化了一个函数对象的属性caller，用于指向调用当前函数的函数的引用。 </li>
<li>prototype是不可枚举的 </li>
</ul>
<p><code>Function.prototype.bind</code> 用于改变函数在执行时的this指向</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var obj = &#123; name : &quot;alex&quot; &#125;; </div><div class="line"></div><div class="line">function func() &#123; </div><div class="line">	console.log(this.name); </div><div class="line">&#125; </div><div class="line"></div><div class="line">var func1 = func.bind(obj)(); // alex</div></pre></td></tr></table></figure>
<h2 id="String的扩展"><a href="#String的扩展" class="headerlink" title="String的扩展"></a>String的扩展</h2><p>添加了trim()方法 <code>String.prototype.trim</code></p>
<h2 id="Date的扩展"><a href="#Date的扩展" class="headerlink" title="Date的扩展"></a>Date的扩展</h2><p>添加了Date.now()、Date.prototype.toJSON()等方法。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Date.now() 等价于 new Date().getTime()</div><div class="line"></div><div class="line">new Date().toJSON(); //&quot;2016-06-29T01:53:15.560Z&quot;</div></pre></td></tr></table></figure>
<h2 id="RegExp对象"><a href="#RegExp对象" class="headerlink" title="RegExp对象"></a>RegExp对象</h2><p>在ES3中，使用正则表达式字面量时共享一个RegExp实例，<br>而在ES5中，每次使用正则表达式字面量时都要创建新的RegExp实例，就像使用RegExp构造函数一样。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/cat/g 等价于  new RegExp(&quot;cat&quot;, &quot;g&quot;);</div></pre></td></tr></table></figure>
<p>相关阅读：<br><a href="http://www.ibm.com/developerworks/cn/web/1305_chengfu_ecmascript5/" target="_blank" rel="external">深入探讨 ECMAScript 规范第五版</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xi480.com1.z0.glb.clouddn.com/AxiaVillage_ZH-CN10956625064_1920x1080.jpg?imageView2/1/w/720/h/400&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;2011年6月，ECMAscript 5.1版发布，并且成为ISO国际标准，简称ES5。&lt;br&gt;
    
    </summary>
    
      <category term="web开发" scheme="http://www.qiakr.com/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="js" scheme="http://www.qiakr.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>CSS 编码指南</title>
    <link href="http://www.qiakr.com/2016/05/07/css-style-guide/"/>
    <id>http://www.qiakr.com/2016/05/07/css-style-guide/</id>
    <published>2016-05-07T08:03:53.000Z</published>
    <updated>2016-05-07T08:12:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xi480.com1.z0.glb.clouddn.com/37b2e3c64e3ef1353e62f79fbce7e7e0.jpg?imageView2/1/w/720/h/400" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>CSS 作为网页样式的描述语言，在前端开发中有着广泛的应用。本文档的目标是使 CSS 代码风格保持一致，容易被理解和被维护。</p>
<p>虽然本文档是针对 CSS 设计的，但是在使用各种 CSS 的预编译器(如 less、sass、stylus 等)时，适用的部分也应尽量遵循本文档的约定。</p>
<a id="more"></a>
<h2 id="核心规范"><a href="#核心规范" class="headerlink" title="核心规范"></a>核心规范</h2><p>核心规范规定了洽客前端使用的css框架和基础类，主要包含两个css文件，<code>weui.css</code> 与 <code>style.css</code>。</p>
<h3 id="基础类"><a href="#基础类" class="headerlink" title="基础类"></a>基础类</h3><p>style.css = 重置类reset.css + 原子类base.css + 组件类component.css;</p>
<p><strong>重置类</strong> 包含了对基本类型标签样式的重置</p>
<p><strong>原子类</strong> 包含了常用的工具：图像大小，百分比，文本对齐，常用行高，常用字体大小，常用边距，学用字体颜色，边框等。</p>
<p><strong>组件类</strong> 包含了图标字体iconfont，弹框，登录等</p>
<h3 id="weui框架"><a href="#weui框架" class="headerlink" title="weui框架"></a>weui框架</h3><p>见 <a href="https://github.com/weui/weui/wiki" target="_blank" rel="external">weui文档说明</a></p>
<p>页面引用，先引用 <code>style.css</code> 再引入 <code>weui.css</code></p>
<h3 id="兼容性要求"><a href="#兼容性要求" class="headerlink" title="兼容性要求"></a>兼容性要求</h3><ul>
<li>PC端兼容webkit内核浏览器即可</li>
<li>移动端兼容到Android4.4及以上，iOS7.0及以上版本。</li>
</ul>
<h3 id="图片使用"><a href="#图片使用" class="headerlink" title="图片使用"></a>图片使用</h3><ul>
<li>小图标：单色图标使用原则 css图标 &gt; iconfont &gt; gif &gt; png</li>
<li>图片使用：优先使用jpg，PS导出质量为高，压缩比率为75%左右。</li>
</ul>
<h2 id="基本规范"><a href="#基本规范" class="headerlink" title="基本规范"></a>基本规范</h2><ul>
<li>基本规范规定了代码的编写风格，推荐使用下面的规范，以便以团队成员的沟通协作。</li>
</ul>
<h3 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h3><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><ul>
<li>CSS 文件使用无 <code>BOM</code> 的 <code>UTF-8</code> 编码。</li>
</ul>
<p>解释：win系统自带的记事本新建的txt文件都是带BOM的，带BOM的叫UTF-8+，不带BOM的为UTF-8，部分语言或工具对UTF-8+格式的文档不能正确解析。</p>
<h4 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h4><ul>
<li><p>属性展开写法下：以 <code>2</code> 个空格做为层级缩进</p>
</li>
<li><p>推荐采用折叠属性写法，将多个属性写在同一行，属性过多可多行书写</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.ui-mask</span> &#123; </div><div class="line">  <span class="attribute">position</span>: fixed; <span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>; <span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">z-index</span>: <span class="number">1100</span>;</div><div class="line">  <span class="attribute">display</span>: none; <span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100%</span>; <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0,0,0,.6);</div><div class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>; <span class="attribute">-webkit-transition</span>: opacity .<span class="number">15s</span>; <span class="attribute">transition</span>: opacity .<span class="number">15s</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h4><ul>
<li><code>选择器</code> 与 <code>{</code> 之间必须包含空格。</li>
<li><code>属性名</code> 与之后的 <code>:</code> 之间不允许包含空格， <code>:</code> 与 <code>属性值</code> 之间必须包含空格。</li>
<li><code>列表型属性值</code> 书写在单行时，<code>,</code> 后必须跟一个空格。</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* good */</span></div><div class="line"><span class="selector-class">.ui-tbl</span>&#123;</div><div class="line">  <span class="attribute">display</span>: table;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.avatar</span> &#123; <span class="attribute">font-family</span>: Arial, sans-serif; &#125;</div><div class="line"></div><div class="line"><span class="comment">/* bad */</span></div><div class="line"><span class="selector-class">.ui-tbl</span>&#123;</div><div class="line"><span class="attribute">display</span>: table;<span class="attribute">width</span>: <span class="number">100%</span>;<span class="attribute">box-sizing</span>: border-box;&#125;</div><div class="line"><span class="selector-class">.avatar</span> &#123;<span class="attribute">font-family</span>: Arial,sans-serif;&#125;</div></pre></td></tr></table></figure>
<h4 id="顺序"><a href="#顺序" class="headerlink" title="顺序"></a>顺序</h4><ul>
<li>按功能分组书写，并以 Formatting Model（布局方式、位置） &gt; Box Model（尺寸） &gt; Typographic（文本相关） &gt; Visual（视觉效果） 的顺序书写，以提高代码的可读性。</li>
</ul>
<p>解释：</p>
<ul>
<li>Formatting Model 相关属性包括：position / top / right / bottom / left / float / display / overflow 等</li>
<li>Box Model 相关属性包括：border / margin / padding / width / height 等</li>
<li>Typographic 相关属性包括：font / line-height / text-align / word-wrap 等</li>
<li>Visual 相关属性包括：background / color / transition / list-style / animation / transform 等</li>
</ul>
<p>另外，如果包含 content 属性，应放在最前面。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.sidebar</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute; <span class="attribute">top</span>: <span class="number">50px</span>; <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">overflow-x</span>: hidden;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>; <span class="attribute">padding</span>: <span class="number">5px</span>; <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>; <span class="attribute">line-height</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#f5f5f5</span>; <span class="attribute">color</span>: <span class="number">#333</span>; <span class="attribute">-webkit-transition</span>: color <span class="number">1s</span>; <span class="attribute">-moz-transition</span>: color <span class="number">1s</span>; <span class="attribute">transition</span>: color <span class="number">1s</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><ul>
<li>建议使用块注释 <code>/* ... */</code>，注释独占一行。</li>
<li>独立的CSS模块，要添加注释说明</li>
</ul>
<h4 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h4><ul>
<li>如无必要，不得为 <code>id</code>、<code>class</code> 选择器添加类型选择器进行限定</li>
</ul>
<p>解释：在性能和维护性上，都有一定的影响。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* good */</span></div><div class="line"><span class="selector-id">#error</span>,<span class="selector-class">.danger-message</span> &#123; <span class="attribute">font-color</span>: <span class="number">#c00</span>; &#125;</div><div class="line"></div><div class="line"><span class="comment">/* bad */</span></div><div class="line"><span class="selector-tag">dialog</span><span class="selector-id">#error</span>, <span class="selector-tag">p</span><span class="selector-class">.danger-message</span> &#123; <span class="attribute">font-color</span>: <span class="number">#c00</span>; &#125;</div></pre></td></tr></table></figure>
<ul>
<li>属性选择器中的值必须用双引号包围。</li>
<li>选择器嵌套层级应少于 <code>4</code> 级</li>
<li>尽量使用class选择器</li>
<li>避免直接使用类型选择器</li>
<li>避免空的class</li>
<li>禁用通配符</li>
<li>对需要javascript操作的元素加上ID，ID尽量以驼峰命名法命名。</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/* good */ </div><div class="line">div.vip-wrap</div><div class="line">	ul.vip-list</div><div class="line">		li.vip-item*3</div><div class="line"></div><div class="line">.vip-item &#123; ... &#125;</div><div class="line"></div><div class="line">/* bad */ </div><div class="line">div.vip-wrap</div><div class="line">	ul.vip-list</div><div class="line">		li*3</div><div class="line"></div><div class="line">.vip-wrap .vip-list li &#123; ... &#125;</div></pre></td></tr></table></figure>
<h4 id="属性缩写"><a href="#属性缩写" class="headerlink" title="属性缩写"></a>属性缩写</h4><ul>
<li>在可以使用缩写的情况下，尽量使用属性缩写。</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* good */</span></div><div class="line"><span class="selector-class">.post</span> &#123;</div><div class="line">    <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">1.5</span> arial, sans-serif;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* bad */</span></div><div class="line"><span class="selector-class">.post</span> &#123;</div><div class="line">    <span class="attribute">font-family</span>: arial, sans-serif;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用 <code>border / margin / padding</code> 等缩写时，应注意隐含值对实际数值的影响，确实需要设置多个方向的值时才使用缩写。<br>解释：<code>border / margin / padding</code> 等缩写会同时设置多个属性的值，容易覆盖不需要覆盖的设定。如某些方向需要继承其他声明的值，则应该分开设置。</p>
<h3 id="命令规则"><a href="#命令规则" class="headerlink" title="命令规则"></a>命令规则</h3><ul>
<li><p>尽量使用BEM命令规则(Block-Element-Modifie)，但可以适当修改，结合组合式命名更加灵活。</p>
</li>
<li><p>模块名/业务名 - 区域名/元素名 - 状态/颜色</p>
</li>
<li><p>全局组件以 ‘ui-‘ 开头</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/* Msg 弹窗模块 */</span></div><div class="line"><span class="selector-class">.ui-msg</span> &#123;&#125;</div><div class="line"><span class="selector-class">.ui-msg</span><span class="selector-class">.alert</span> &#123;&#125;</div><div class="line"><span class="selector-class">.ui-msg</span><span class="selector-class">.prompt</span> &#123;&#125;</div><div class="line"><span class="selector-class">.ui-msg</span><span class="selector-class">.actions</span> &#123;&#125;</div><div class="line"><span class="selector-class">.ui-msg-hd</span> &#123;&#125;</div><div class="line"><span class="selector-class">.ui-msg-bd</span> &#123;&#125;</div><div class="line"><span class="selector-class">.ui-msg-ft</span> &#123;&#125;</div></pre></td></tr></table></figure>
<h4 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h4><ul>
<li>在使用relative 或 absolute 定位时，尽量指定固定的z-index的值，值的大小为<code>10倍数</code>，小于999999;</li>
</ul>
<h3 id="值与单位"><a href="#值与单位" class="headerlink" title="值与单位"></a>值与单位</h3><h4 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h4><ul>
<li>当数值为 0 - 1 之间的小数时，省略整数部分的 0</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* good */</span></div><div class="line"><span class="selector-tag">panel</span> &#123;</div><div class="line">    <span class="attribute">opacity</span>: .<span class="number">8</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* bad */</span></div><div class="line"><span class="selector-tag">panel</span> &#123;</div><div class="line">    <span class="attribute">opacity</span>: <span class="number">0.8</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h4><ul>
<li>url() 函数中的路径不加引号。</li>
<li>url() 函数中的绝对路径可省去协议名。</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(//baidu.com/img/bg.png) no-repeat <span class="number">0</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h4><ul>
<li>长度为 0 时须省略单位。 (也只有长度单位可省)</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* good */</span></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* bad */</span></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">5px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h4><ul>
<li>颜色值可以缩写时，必须使用缩写形式。</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* good */</span></div><div class="line"><span class="selector-class">.success</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#aca</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* bad */</span></div><div class="line"><span class="selector-class">.success</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#aaccaa</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>颜色值不允许使用命名色值。</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* good */</span></div><div class="line"><span class="selector-class">.success</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#90ee90</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* bad */</span></div><div class="line"><span class="selector-class">.success</span> &#123;</div><div class="line">    <span class="attribute">color</span>: lightgreen;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h4><ul>
<li>在定义无边框样式时，使用 0 代替 none。</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* good */</span></div><div class="line"><span class="selector-class">.foo</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* bad */</span></div><div class="line"><span class="selector-class">.foo</span> &#123;</div><div class="line">  <span class="attribute">border</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xi480.com1.z0.glb.clouddn.com/37b2e3c64e3ef1353e62f79fbce7e7e0.jpg?imageView2/1/w/720/h/400&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;CSS 作为网页样式的描述语言，在前端开发中有着广泛的应用。本文档的目标是使 CSS 代码风格保持一致，容易被理解和被维护。&lt;/p&gt;
&lt;p&gt;虽然本文档是针对 CSS 设计的，但是在使用各种 CSS 的预编译器(如 less、sass、stylus 等)时，适用的部分也应尽量遵循本文档的约定。&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="http://www.qiakr.com/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Javascript 编码指南</title>
    <link href="http://www.qiakr.com/2016/05/07/javascript-style-guide/"/>
    <id>http://www.qiakr.com/2016/05/07/javascript-style-guide/</id>
    <published>2016-05-07T06:23:18.000Z</published>
    <updated>2016-05-07T07:22:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xi480.com1.z0.glb.clouddn.com/ccode.jpg" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>总所周知，<code>javascript</code> 是一种语法极其灵活的语言。变量随时用随时可以声明；语句结束符可以不要；字符串和数字也可以相加；参数多一个少一个也不会报错。<br>没错，当你从 <code>C/C++</code> 和 <code>Java</code> 严格的语法规定之下，转向 <code>JavaScript</code> 语言，会觉得自由了很多，轻松了很多。</p>
<p>语法松散是 <code>JavaScript</code> 重要的特征。它灵活易懂，给开发人员带来了很多方便，但如果编写过程中不注意，代码的调试成本和维护成本则会无形地增加。<br><code>JavaScript</code> 编码会随应被直接发送到客户端的浏览器，代码规范不只是代码质量的保证，也影响到产品的长期信誉。</p>
<p>本文档的目标是使 <code>JavaScript</code> 代码风格保持一致，良好的编程风格有助于写出质量更高、错误更少、更易于维护的程序。</p>
<a id="more"></a>
<h3 id="JavaScript-语言规范"><a href="#JavaScript-语言规范" class="headerlink" title="JavaScript 语言规范"></a>JavaScript 语言规范</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">变量 常量 保留字 数组 字符串 函数 块内函数声明 闭包 Array和Object直接量</div><div class="line">对象原型 True与False 类型分配&amp;强制转换 浮点数精度 命名规范</div></pre></td></tr></table></figure>
<h3 id="JavaScript-编码风格"><a href="#JavaScript-编码风格" class="headerlink" title="JavaScript 编码风格"></a>JavaScript 编码风格</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">文件编码 分号 逗号 空格 大括号 单引号、双引号 空行 二元和三元操作符 语句块 </div><div class="line">注释 全局变量 全等</div></pre></td></tr></table></figure>
<hr>
<h3 id="JavaScript-语言规范-1"><a href="#JavaScript-语言规范-1" class="headerlink" title="JavaScript 语言规范"></a>JavaScript 语言规范</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><ul>
<li><p>声明变量必须加上 <code>var</code> 关键字</p>
<p>  当你没有写 var, 变量就会暴露在全局上下文中, 这样很可能会和现有变量冲突. 另外, 如果没有加上, 很难明确该变量的作用域是什么,</p>
<p>  变量也很可能像在局部作用域中, 很轻易地泄漏到 Document 或者 Window 中, 所以务必用 var 去声明变量.</p>
</li>
</ul>
<h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><ul>
<li>常量使用大写字符并用下划线分隔，如：PAGE_CONFIG</li>
</ul>
<h4 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h4><ul>
<li>不要使用保留字，在IE8中不起作用</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> superman = &#123;</div><div class="line">  <span class="attr">defaults</span>: &#123; <span class="attr">clark</span>: <span class="string">'kent'</span> &#125;,</div><div class="line">  <span class="attr">hidden</span>: <span class="literal">true</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> superman = &#123;</div><div class="line">  <span class="attr">default</span>: &#123; <span class="attr">clark</span>: <span class="string">'kent'</span> &#125;,</div><div class="line">  <span class="attr">private</span>: <span class="literal">true</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ul>
<li>添加数组元素时，使用push而不是直接添加</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> someStack = [];</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">someStack.push(<span class="string">'abracadabra'</span>);</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">someStack[someStack.length] = <span class="string">'abracadabra'</span>;</div></pre></td></tr></table></figure>
<ul>
<li>需要复制数组时，可以使用slice</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> len = items.length;</div><div class="line"><span class="keyword">var</span> itemsCopy = [];</div><div class="line"><span class="keyword">var</span> i;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">itemsCopy = items.slice();</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">  itemsCopy[i] = items[i];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>使用slice将类数组对象转为数组</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>遍历数组不使用 <code>for in</code></li>
</ul>
<p>数组对象可能存在数字以外的属性, 这种情况下 for in 不会得到正确结果.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</div><div class="line">arr.other = <span class="string">'other things'</span>; <span class="comment">// 这里仅作演示, 实际中应使用Object类型</span></div><div class="line"></div><div class="line"><span class="comment">// 正确的遍历方式</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 错误的遍历方式</span></div><div class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> arr) &#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>清空数组使用 <code>.length = 0</code></p>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ul>
<li>对字符串使用单引号</li>
</ul>
<p>超过80个字符的字符串应该使用字符串连接符进行跨行（对长字符串过度使用连接符将会影响性能）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> errorMessage = <span class="string">'This is a super long error that was thrown because '</span> +</div><div class="line">  <span class="string">'of Batman. When you stop to think about how Batman had anything to do '</span> +</div><div class="line">  <span class="string">'with this, you would get nowhere fast.'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> errorMessage = <span class="string">'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> errorMessage = <span class="string">'This is a super long error that was thrown because \</span></div><div class="line">of Batman. When you stop to think about how Batman had anything to do \</div><div class="line">with this, you would get nowhere \</div><div class="line">fast.';</div></pre></td></tr></table></figure>
<ul>
<li>使用 <code>join()</code> 来创建字符串</li>
</ul>
<p>通常写法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">listHtml</span>(<span class="params">items</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> html = <span class="string">'&lt;div class="foo"&gt;'</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.length; ++i) &#123;</div><div class="line">    <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</div><div class="line">      html += <span class="string">', '</span>;</div><div class="line">    &#125;</div><div class="line">    html += itemHtml(items[i]);</div><div class="line">  &#125;</div><div class="line">  html += <span class="string">'&lt;/div&gt;'</span>;</div><div class="line">  <span class="keyword">return</span> html;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但这样在 IE 下非常慢, 可以用下面的方式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">listHtml</span>(<span class="params">items</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> html = [];</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.length; ++i) &#123;</div><div class="line">    html[i] = itemHtml(items[i]);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="string">'&lt;div class="foo"&gt;'</span> + html.join(<span class="string">', '</span>) + <span class="string">'&lt;/div&gt;'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong> 也可以是用数组作为字符串构造器, 然后通过 myArray.join(‘’) 转换成字符串. 不过由于赋值操作快于数组的 push(), 所以尽量使用赋值操作. </strong></p>
<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><ul>
<li>不要在非函数块中(if, while, etc)声明函数，尽管浏览器允许你分配函数给一个变量，但坏消息是，不同的浏览器用不同的方式解析它</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> test;</div><div class="line"><span class="keyword">if</span> (currentUser) &#123;</div><div class="line">  test = <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Yup.'</span>);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (currentUser) &#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Nope.'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>不要命名一个参数为arguments，否则它将优先于传递给每个函数作用域中的arguments对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">yup</span>(<span class="params">name, options, args</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">nope</span>(<span class="params">name, options, arguments</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在作用域顶端对变量赋值，这有助于避免变量声明问题和与声明提升相关的问题</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name = getName();</div><div class="line"></div><div class="line">  test();</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'doing stuff..'</span>);</div><div class="line"></div><div class="line">  <span class="comment">//..other stuff..</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> (name === <span class="string">'test'</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  test();</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'doing stuff..'</span>);</div><div class="line"></div><div class="line">  <span class="comment">//..other stuff..</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> name = getName();</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (name === <span class="string">'test'</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!<span class="built_in">arguments</span>.length) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> name = getName();</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name = getName();</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (!<span class="built_in">arguments</span>.length) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>函数声明会提升变量名和函数体</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good </span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  superPower(); <span class="comment">// =&gt; Flying</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">superPower</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Flying'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  superPower(); <span class="comment">// =&gt; TypeError superPower is not a function</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> superPower = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Flying'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="块内函数声明"><a href="#块内函数声明" class="headerlink" title="块内函数声明"></a>块内函数声明</h4><ul>
<li>不要在块内声明函数</li>
<li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (x) &#123;</div><div class="line">  <span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (x) &#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  块内声明函数, 但它不属于 ECMAScript 规范, 各个浏览器糟糕的实现相互不兼容, 有些也与未来 ECMAScript 草案相违背<br>  ECMAScript 只允许在脚本的根语句或函数中声明函数. 如果确实需要在块中定义函数, 建议使用函数表达式来初始化变量:</p>
</li>
</ul>
<h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><ul>
<li>小心使用闭包</li>
</ul>
<p>闭包保留了一个指向它封闭作用域的指针, 所以, 在给 DOM 元素附加闭包时, 很可能会产生循环引用, 进一步导致内存泄漏. 比如下面的代码:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">element, a, b</span>) </span>&#123;</div><div class="line">  element.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">/* uses a and b */</span> &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里, 即使没有使用 element, 闭包也保留了 element, a 和 b 的引用, . 由于 element 也保留了对闭包的引用, 这就产生了循环引用, 这就不能被 GC 回收. 这种情况下, 可将代码重构为:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">element, a, b</span>) </span>&#123;</div><div class="line">  element.onclick = bar(a, b);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">/* uses a and b */</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Array-和-Object-直接量"><a href="#Array-和-Object-直接量" class="headerlink" title="Array 和 Object 直接量"></a>Array 和 Object 直接量</h4><ul>
<li>使用 <code>Array</code> 和 <code>Object</code> 语法, 而不使用 <code>Array</code> 和 <code>Object</code> 构造器.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//good</span></div><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> o2 = &#123;</div><div class="line">  <span class="attr">a</span>: <span class="number">0</span>,</div><div class="line">  <span class="attr">b</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">c</span>: <span class="number">2</span>,</div><div class="line">  <span class="string">'strange key'</span>: <span class="number">3</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//bad</span></div><div class="line"><span class="keyword">var</span> a1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</div><div class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">o2.a = <span class="number">0</span>;</div><div class="line">o2.b = <span class="number">1</span>;</div><div class="line">o2.c = <span class="number">2</span>;</div><div class="line">o2[<span class="string">'strange key'</span>] = <span class="number">3</span>;</div></pre></td></tr></table></figure>
<h4 id="对象原型"><a href="#对象原型" class="headerlink" title="对象原型"></a>对象原型</h4><ul>
<li><strong>不要</strong>修改内置对象的原型，如 Object.prototype 和 Array.prototype 的原型，给添加内置原型方法很容易和其它库冲突或者可能与将来ES升级不兼容。</li>
</ul>
<h4 id="True-与-False"><a href="#True-与-False" class="headerlink" title="True 与 False"></a>True 与 False</h4><p>下面的布尔表达式都返回 <code>false</code>:</p>
<ul>
<li><code>null</code></li>
<li><code>undefined</code></li>
<li><code>&#39;&#39;</code> 空字符串</li>
<li><code>0</code> 数字0</li>
</ul>
<p>但小心下面的, 可都返回 <code>true</code>:</p>
<ul>
<li><code>&#39;0&#39;</code> 字符串0</li>
<li><code>[]</code> 空数组</li>
<li><code>{}</code> 空对象</li>
</ul>
<p>如果你想判断是一个变量是否为<code>null/&#39;&#39;/0/false</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good </span></div><div class="line"><span class="keyword">if</span>(x)&#123; ... &#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span>(x != <span class="literal">null</span>)&#123; ... &#125;</div></pre></td></tr></table></figure>
<p><strong> 还有很多需要注意的地方 </strong><br>以下都为<code>true</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Boolean</span>(<span class="string">'0'</span>) == <span class="literal">true</span></div><div class="line"><span class="string">'0'</span> != <span class="literal">true</span></div><div class="line"><span class="number">0</span> != <span class="literal">null</span></div><div class="line"><span class="number">0</span> == []</div><div class="line"><span class="number">0</span> == <span class="literal">false</span></div><div class="line"><span class="built_in">Boolean</span>(<span class="literal">null</span>) == <span class="literal">false</span></div><div class="line"><span class="literal">null</span> != <span class="literal">true</span></div><div class="line"><span class="literal">null</span> != <span class="literal">false</span></div><div class="line"><span class="built_in">Boolean</span>(<span class="literal">undefined</span>) == <span class="literal">false</span></div><div class="line"><span class="literal">undefined</span> != <span class="literal">true</span></div><div class="line"><span class="literal">undefined</span> != <span class="literal">false</span></div><div class="line"><span class="built_in">Boolean</span>([]) == <span class="literal">true</span></div><div class="line">[] != <span class="literal">true</span></div><div class="line">[] == <span class="literal">false</span></div><div class="line"><span class="built_in">Boolean</span>(&#123;&#125;) == <span class="literal">true</span></div><div class="line">&#123;&#125; != <span class="literal">true</span></div><div class="line">&#123;&#125; != <span class="literal">false</span></div></pre></td></tr></table></figure>
<h4 id="遍历-Node-List"><a href="#遍历-Node-List" class="headerlink" title="遍历 Node List"></a>遍历 Node List</h4><p>Node lists 是通过给节点迭代器加一个过滤器来实现的. 这表示获取他的属性, 如 length 的时间复杂度为 O(n), 通过 length 来遍历整个列表需要 O(n^2).</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> paragraphs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; paragraphs.length; i++) &#123;</div><div class="line">  doSomething(paragraphs[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样做会更好:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> paragraphs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, paragraph; paragraph = paragraphs[i]; i++) &#123;</div><div class="line">  doSomething(paragraph);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种方法对所有的 collections 和数组(只要数组不包含 falsy 值) 都适用.</p>
<p>在上面的例子中, 也可以通过 firstChild 和 nextSibling 来遍历孩子节点.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> parentNode = <span class="built_in">document</span>.getElementById(<span class="string">'foo'</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> child = parentNode.firstChild; child; child = child.nextSibling) &#123;</div><div class="line">  doSomething(child);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="类型分配-amp-强制转换"><a href="#类型分配-amp-强制转换" class="headerlink" title="类型分配&amp;强制转换"></a>类型分配&amp;强制转换</h4><ul>
<li>执行强制类型转换的语句</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  =&gt; this.reviewScore = 9;</span></div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> totalScore = <span class="keyword">this</span>.reviewScore + <span class="string">' total score'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> totalScore = <span class="keyword">this</span>.reviewScore + <span class="string">''</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> totalScore = <span class="string">''</span> + <span class="keyword">this</span>.reviewScore;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> totalScore = <span class="string">''</span> + <span class="keyword">this</span>.reviewScore + <span class="string">' total score'</span>;</div></pre></td></tr></table></figure>
<ul>
<li>使用parseInt对Numbers进行转换，并带一个进制作为参数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> inputValue = <span class="string">'4'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> val = <span class="keyword">new</span> <span class="built_in">Number</span>(inputValue);</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> val = +inputValue;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> val = inputValue &gt;&gt; <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> val = <span class="built_in">parseInt</span>(inputValue);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> val = <span class="built_in">Number</span>(inputValue);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> val = <span class="built_in">parseInt</span>(inputValue, <span class="number">10</span>);</div></pre></td></tr></table></figure>
<p><strong> 注意： </strong><br>当使用位运算时，Numbers被视为64位值，但是位运算总是返回32位整型。<br>对于整型值大于32位的进行位运算将导致不可预见的行为。<br>最大的有符号32位整数是2,147,483,647</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">2147483647</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; 2147483647</span></div><div class="line"><span class="number">2147483648</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; -2147483648</span></div><div class="line"><span class="number">2147483649</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; -2147483647</span></div><div class="line"></div><div class="line">~~<span class="number">2147483647</span> <span class="comment">//=&gt; 2147483647</span></div><div class="line">~~<span class="number">2147483648</span> <span class="comment">//=&gt; -2147483648</span></div><div class="line">~~<span class="number">2147483649</span> <span class="comment">//=&gt; -2147483647</span></div></pre></td></tr></table></figure>
<h4 id="浮点数精度"><a href="#浮点数精度" class="headerlink" title="浮点数精度"></a>浮点数精度</h4><p>使用了IEEE 754 浮点数格式来存储浮点类型的任何编程语言（C/C++/C#/Java 等等）都存在精度丢失问题。</p>
<p>在 C#、Java 中，提供了 Decimal、BigDecimal 封装类来进行相应的处理，才避开了精度丢失。</p>
<p>原生JS并没有提供相应的API, 寻么就会出现以下类似怪异情况：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">0.1</span> + <span class="number">0.2</span> == <span class="number">0.30000000000000004</span></div><div class="line"><span class="number">9999999999999999</span> == <span class="number">10000000000000000</span>; <span class="comment">// true</span></div><div class="line"><span class="number">0.05</span> + <span class="number">0.2</span> == <span class="number">0.25</span> <span class="comment">// true</span></div><div class="line"><span class="number">0.05</span> + <span class="number">0.9</span> == <span class="number">0.95</span> <span class="comment">// false</span></div></pre></td></tr></table></figure>
<p>对于这人问题这里不做展开，只提供解决方案，可使用 <a href="https://github.com/josdejong/mathjs" target="_blank" rel="external">math.js</a> 对数据进行运算</p>
<p>详情解释见 玉伯的<a href="https://lifesinger.wordpress.com/2011/03/07/js-precision/" target="_blank" rel="external">JavaScript 中小数和大整数的精度丢失</a></p>
<h4 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h4><ul>
<li>避免单字母名称，让名称具有描述性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">q</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// ..stuff..</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>当命名对象、函数和实例时使用骆驼拼写法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> OBJEcttsssss = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> this_is_my_object = &#123;&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> u = <span class="keyword">new</span> user(&#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'Bob Parr'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> thisIsMyObject = &#123;&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">thisIsMyFunction</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User(&#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'Bob Parr'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>当命名构造函数或类名时，使用驼峰式写法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">user</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = options.name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> bad = <span class="keyword">new</span> user(&#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'nope'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = options.name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> good = <span class="keyword">new</span> User(&#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'yup'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>命名私有属性时使用前置下划线</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">this</span>.__firstName__ = <span class="string">'Panda'</span>;</div><div class="line"><span class="keyword">this</span>.firstName_ = <span class="string">'Panda'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">this</span>._firstName = <span class="string">'Panda'</span>;</div></pre></td></tr></table></figure>
<ul>
<li>保存this引用时使用_this</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(self);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(that);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(_this);</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="JavaScript-编码风格-1"><a href="#JavaScript-编码风格-1" class="headerlink" title="JavaScript 编码风格"></a>JavaScript 编码风格</h3><h4 id="文件编码"><a href="#文件编码" class="headerlink" title="文件编码"></a>文件编码</h4><ul>
<li>JavaScript 文件使用无 <code>BOM</code> 的 <code>UTF-8</code> 编码。</li>
</ul>
<h4 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h4><ul>
<li>总是以分号结尾</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> myMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="number">42</span>;</div><div class="line">&#125;;</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// Some initialization code wrapped in a function to create a scope for locals.</span></div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> myMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="number">42</span>;</div><div class="line">&#125;</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// Some initialization code wrapped in a function to create a scope for locals.</span></div><div class="line">&#125;)();</div><div class="line"><span class="comment">// Uncaught TypeError: (intermediate value)(...) is not a function(…)</span></div><div class="line"><span class="comment">//语句会解释成, 一个函数带一匿名函数作为参数而被调用, 返回42后, 又一次被"调用", 这就导致了错误.</span></div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name = <span class="string">'Skywalker'</span>;</div><div class="line">  <span class="keyword">return</span> name;</div><div class="line">&#125;)();</div><div class="line">或</div><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name = <span class="string">'Skywalker'</span>;</div><div class="line">  <span class="keyword">return</span> name;</div><div class="line">&#125;)()</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name = <span class="string">'Skywalker'</span></div><div class="line">  <span class="keyword">return</span> name</div><div class="line">&#125;)()</div></pre></td></tr></table></figure>
<pre><code>JavaScript 的语句以分号作为结束符, 除非可以非常准确推断某结束位置才会省略分号. 语句中声明了函数/对象/数组直接量, 但 闭括号(&apos;}&apos;或&apos;]&apos;)并不足以表示该语句的结束. 
在 JavaScript 中, 只有当语句后的下一个符号是后缀或括号运算符时, 才会认为该语句的结束.
遗漏分号有时会出现很奇怪的结果, 所以确保语句以分号结束.
</code></pre><h5 id="逗号"><a href="#逗号" class="headerlink" title="逗号"></a>逗号</h5><ul>
<li>一次性申明多个变量或申明一个对象，逗号置尾</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> foo = <span class="number">1</span>,</div><div class="line">    bar = <span class="number">2</span>,</div><div class="line">    baz = <span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">foo</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">bar</span>: <span class="number">2</span>,</div><div class="line">    <span class="attr">baz</span>: <span class="number">3</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> foo = <span class="number">1</span></div><div class="line">  , bar = <span class="number">2</span></div><div class="line">  , baz = <span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">foo</span>: <span class="number">1</span></div><div class="line">  , <span class="attr">bar</span>: <span class="number">2</span></div><div class="line">  , <span class="attr">baz</span>: <span class="number">3</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h5 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h5><ul>
<li>函数名称和条件语句后面不加空格</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">"bar"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</div><div class="line">  <span class="comment">//...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">"bar"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">  <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>参数与括号之间无空格</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">arg1, arg2</span>) </span>&#123;</div><div class="line"><span class="comment">//or</span></div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"> arg1, arg2 </span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> ( <span class="literal">true</span> ) &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>对象字面量冒号后面加空格，前面不加</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line">&#123;</div><div class="line">  <span class="attr">foo</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">bar</span>: <span class="number">2</span>,</div><div class="line">  <span class="attr">baz</span>: <span class="number">3</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">&#123;</div><div class="line">  <span class="attr">foo</span> : <span class="number">1</span>,</div><div class="line">  <span class="attr">bar</span> : <span class="number">2</span>,</div><div class="line">  <span class="attr">baz</span> : <span class="number">3</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在左大括号之前留一个空格</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>用空白分隔运算符</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> x = y + <span class="number">5</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> x=y+<span class="number">5</span>;</div></pre></td></tr></table></figure>
<ul>
<li>使用软制表符设置两个空格</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">∙∙∙∙<span class="keyword">var</span> name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">∙<span class="keyword">var</span> name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">∙∙<span class="keyword">var</span> name;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>当调用很长的方法链时使用缩进，可以强调这行是方法调用，不是新的语句</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">$(<span class="string">'#items'</span>).find(<span class="string">'.selected'</span>).highlight().end().find(<span class="string">'.open'</span>).updateCount();</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">$(<span class="string">'#items'</span>).</div><div class="line">  find(<span class="string">'.selected'</span>).</div><div class="line">    highlight().</div><div class="line">    end().</div><div class="line">  find(<span class="string">'.open'</span>).</div><div class="line">    updateCount();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">$(<span class="string">'#items'</span>)</div><div class="line">  .find(<span class="string">'.selected'</span>)</div><div class="line">    .highlight()</div><div class="line">    .end()</div><div class="line">  .find(<span class="string">'.open'</span>)</div><div class="line">    .updateCount();</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> leds = stage.selectAll(<span class="string">'.led'</span>).data(data).enter().append(<span class="string">'svg:svg'</span>).classed(<span class="string">'led'</span>, <span class="literal">true</span>)</div><div class="line">    .attr(<span class="string">'width'</span>,  (radius + margin) * <span class="number">2</span>).append(<span class="string">'svg:g'</span>)</div><div class="line">    .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + (radius + margin) + <span class="string">','</span> + (radius + margin) + <span class="string">')'</span>)</div><div class="line">    .call(tron.led);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> leds = stage.selectAll(<span class="string">'.led'</span>)</div><div class="line">    .data(data)</div><div class="line">  .enter().append(<span class="string">'svg:svg'</span>)</div><div class="line">    .classed(<span class="string">'led'</span>, <span class="literal">true</span>)</div><div class="line">    .attr(<span class="string">'width'</span>,  (radius + margin) * <span class="number">2</span>)</div><div class="line">  .append(<span class="string">'svg:g'</span>)</div><div class="line">    .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + (radius + margin) + <span class="string">','</span> + (radius + margin) + <span class="string">')'</span>)</div><div class="line">    .call(tron.led);</div></pre></td></tr></table></figure>
<h5 id="大括号"><a href="#大括号" class="headerlink" title="大括号"></a>大括号</h5><ul>
<li>表示区块起首的大括号，不要另起一行。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">key</span> : value;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">return</span></div><div class="line">&#123;　　</div><div class="line">    <span class="attr">key</span>:value;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>代码的原意，是要返回一个对象，但实际上返回的是undefined，因为Javascript自动在return语句后面添加了分号。</p>
<h5 id="单引号、双引号"><a href="#单引号、双引号" class="headerlink" title="单引号、双引号"></a>单引号、双引号</h5><ul>
<li>统一使用单引号</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> msg = <span class="string">'This is some HTML'</span>;</div></pre></td></tr></table></figure>
<pre><code>单引号 (&apos;) 优于双引号 (&quot;). 当你创建一个包含 HTML 代码的字符串时就知道它的好处了.
</code></pre><h5 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h5><ul>
<li>使用空行来划分一组逻辑上相关联的代码片段.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">doSomethingTo(x);</div><div class="line">doSomethingElseTo(x);</div><div class="line">andThen(x);</div><div class="line"></div><div class="line">nowDoSomethingWith(y);</div><div class="line"></div><div class="line">andNowWith(z);</div></pre></td></tr></table></figure>
<h5 id="二元和三元操作符"><a href="#二元和三元操作符" class="headerlink" title="二元和三元操作符"></a>二元和三元操作符</h5><ul>
<li>操作符始终跟随着前行, 这样就不用顾虑分号的隐式插入问题. 如果一行实在放不下, 还是按照下面的缩进风格来换行.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = a ? b : c;  <span class="comment">// All on one line if it will fit.</span></div><div class="line"></div><div class="line"><span class="comment">// Indentation +4 is OK.</span></div><div class="line"><span class="keyword">var</span> y = a ?</div><div class="line">    longButSimpleOperandB : longButSimpleOperandC;</div><div class="line"></div><div class="line"><span class="comment">// Indenting to the line position of the first operand is also OK.</span></div><div class="line"><span class="keyword">var</span> z = a ?</div><div class="line">        moreComplicatedB :</div><div class="line">        moreComplicatedC;</div><div class="line"></div><div class="line"><span class="comment">// 二元操作符后面的必须是一个完整的执行语句</span></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> isShow = <span class="literal">true</span>, x1;</div><div class="line">isShow ? x1=<span class="number">2</span>;</div><div class="line"><span class="comment">//Uncaught SyntaxError: Unexpected token ;(…)</span></div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> isShow = <span class="literal">true</span>, x1;</div><div class="line">isShow ? (x1=<span class="number">2</span>);</div></pre></td></tr></table></figure>
<ul>
<li>二元布尔操作符是可短路的, 只有在必要时才会计算到最后一项.<br><code>&quot;||&quot;</code> 被称作为 <code>default</code> 操作符</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">opt_win</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> win;</div><div class="line">  <span class="keyword">if</span> (opt_win) &#123;</div><div class="line">    win = opt_win;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    win = <span class="built_in">window</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 可简化为</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">opt_win</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> win = opt_win || <span class="built_in">window</span>;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>“&amp;&amp;” 也可简短代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (node) &#123;</div><div class="line">  <span class="keyword">if</span> (node.kids) &#123;</div><div class="line">    <span class="keyword">if</span> (node.kids[index]) &#123;</div><div class="line">      foo(node.kids[index]);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 可简化为</span></div><div class="line"><span class="keyword">if</span> (node &amp;&amp; node.kids &amp;&amp; node.kids[index]) &#123;</div><div class="line">  foo(node.kids[index]);</div><div class="line">&#125;</div><div class="line"><span class="comment">//或者</span></div><div class="line"><span class="keyword">var</span> kid = node &amp;&amp; node.kids &amp;&amp; node.kids[index];</div><div class="line"><span class="keyword">if</span> (kid) &#123;</div><div class="line">  foo(kid);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="语句块"><a href="#语句块" class="headerlink" title="语句块"></a>语句块</h5><ul>
<li>对于使用if和else的多行语句块，把else和if语句块的右大括号放在同一行</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (test) &#123;</div><div class="line">  thing1();</div><div class="line">  thing2();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  thing3();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (test) &#123;</div><div class="line">  thing1();</div><div class="line">  thing2();</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">  thing3();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><ul>
<li>多行注释使用/<em>* … </em>/，需包含一个描述、所有参数的具体类型和值以及返回值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * make() returns a new element</div><div class="line"> * based on the passed in tag name</div><div class="line"> *</div><div class="line"> * @param &#123;String&#125; tag</div><div class="line"> * @return &#123;Element&#125; element</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line"></div><div class="line">  <span class="keyword">return</span> element;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="comment">// make() returns a new element</span></div><div class="line"><span class="comment">// based on the passed in tag name</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @param &#123;String&#125; tag</span></div><div class="line"><span class="comment">// @return &#123;Element&#125; element</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line"></div><div class="line">  <span class="keyword">return</span> element;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>单行注释使用<code>//</code>，把单行注释放在语句的上一行，并且在注释之前空一行</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fetching type...'</span>);</div><div class="line"></div><div class="line">  <span class="comment">// set the default type to 'no type'</span></div><div class="line">  <span class="keyword">var</span> type = <span class="keyword">this</span>._type || <span class="string">'no type'</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> type;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fetching type...'</span>);</div><div class="line">  <span class="comment">// set the default type to 'no type'</span></div><div class="line">  <span class="keyword">var</span> type = <span class="keyword">this</span>._type || <span class="string">'no type'</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> type;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>使用<code>//TODO:</code>给问题解决方案作注释</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Calculator</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// <span class="doctag">TODO:</span> total should be configurable by an options param</span></div><div class="line">  <span class="keyword">this</span>.total = <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h5><ul>
<li>避免使用全局变量；如果不得不使用，用大写字母表示变量名，比如UPPER_CASE。</li>
</ul>
<h4 id="和"><a href="#和" class="headerlink" title="== 和 ==="></a><code>==</code> 和 <code>===</code></h4><ul>
<li>尽量使用’===’来进行逻辑等的判断，用’!==’进行逻辑不等的判断</li>
<li><code>==</code>作逻辑等判断时，会先进行类型转换后再进行比较。<code>===</code>则不会。因而，<code>==</code>进行的判断结果可能产生偏差。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> valueA = <span class="string">"1"</span>; </div><div class="line"><span class="keyword">var</span> valueB = <span class="number">1</span>; </div><div class="line"><span class="keyword">if</span> ( valueA == valueB) &#123; </div><div class="line">  alert(<span class="string">"Equal"</span>); </div><div class="line">&#125; </div><div class="line"><span class="keyword">else</span> &#123; </div><div class="line">  alert(<span class="string">"Not equal"</span>) </div><div class="line">&#125; </div><div class="line"><span class="comment">//output: "Equal"</span></div><div class="line"><span class="keyword">if</span> ( valueA === valueB) &#123; </div><div class="line">  alert(<span class="string">"Equal"</span>); </div><div class="line">&#125; </div><div class="line"><span class="keyword">else</span> &#123; </div><div class="line">  alert(<span class="string">"Not equal"</span>) </div><div class="line">&#125; </div><div class="line"><span class="comment">//output: "Not equal"</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xi480.com1.z0.glb.clouddn.com/ccode.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;总所周知，&lt;code&gt;javascript&lt;/code&gt; 是一种语法极其灵活的语言。变量随时用随时可以声明；语句结束符可以不要；字符串和数字也可以相加；参数多一个少一个也不会报错。&lt;br&gt;没错，当你从 &lt;code&gt;C/C++&lt;/code&gt; 和 &lt;code&gt;Java&lt;/code&gt; 严格的语法规定之下，转向 &lt;code&gt;JavaScript&lt;/code&gt; 语言，会觉得自由了很多，轻松了很多。&lt;/p&gt;
&lt;p&gt;语法松散是 &lt;code&gt;JavaScript&lt;/code&gt; 重要的特征。它灵活易懂，给开发人员带来了很多方便，但如果编写过程中不注意，代码的调试成本和维护成本则会无形地增加。&lt;br&gt;&lt;code&gt;JavaScript&lt;/code&gt; 编码会随应被直接发送到客户端的浏览器，代码规范不只是代码质量的保证，也影响到产品的长期信誉。&lt;/p&gt;
&lt;p&gt;本文档的目标是使 &lt;code&gt;JavaScript&lt;/code&gt; 代码风格保持一致，良好的编程风格有助于写出质量更高、错误更少、更易于维护的程序。&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="http://www.qiakr.com/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
</feed>
